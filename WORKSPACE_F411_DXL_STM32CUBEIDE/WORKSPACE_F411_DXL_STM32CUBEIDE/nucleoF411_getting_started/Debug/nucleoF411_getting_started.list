
nucleoF411_getting_started.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005714  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  08005b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000039c  20000020  08005bb4  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003bc  08005bb4  000203bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010ea6  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028aa  00000000  00000000  00030ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c0  00000000  00000000  000337a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fa8  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007246  00000000  00000000  00035808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018c01  00000000  00000000  0003ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a9f59  00000000  00000000  0005564f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000ff5a8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000047b8  00000000  00000000  000ff5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005894 	.word	0x08005894

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08005894 	.word	0x08005894

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f94f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f003 fe90 	bl	8004a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f967 	bl	800104e <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f000 f92f 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004
 8000db8:	20000000 	.word	0x20000000

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	2000006c 	.word	0x2000006c

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000006c 	.word	0x2000006c

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000004 	.word	0x20000004

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00c      	b.n	800109e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2205      	movs	r2, #5
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b8:	b2db      	uxtb	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e159      	b.n	8001398 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8148 	bne.w	8001392 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x4a>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b12      	cmp	r3, #18
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	69b9      	ldr	r1, [r7, #24]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d00b      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a2:	2b11      	cmp	r3, #17
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a2 	beq.w	8001392 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a56      	ldr	r2, [pc, #344]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b54      	ldr	r3, [pc, #336]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_GPIO_Init+0x2ec>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a49      	ldr	r2, [pc, #292]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x202>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a48      	ldr	r2, [pc, #288]	; (80013bc <HAL_GPIO_Init+0x2f4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x1fe>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <HAL_GPIO_Init+0x2f8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x1fa>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a46      	ldr	r2, [pc, #280]	; (80013c4 <HAL_GPIO_Init+0x2fc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x1f6>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a45      	ldr	r2, [pc, #276]	; (80013c8 <HAL_GPIO_Init+0x300>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x1f2>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x2ec>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_GPIO_Init+0x304>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130e:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_GPIO_Init+0x304>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_GPIO_Init+0x304>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_GPIO_Init+0x304>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f aea2 	bls.w	80010e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f003 faf8 	bl	8004a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40013c00 	.word	0x40013c00

08001434 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001454:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800145c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b10      	cmp	r3, #16
 8001462:	d003      	beq.n	800146c <HAL_I2C_EV_IRQHandler+0x38>
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b40      	cmp	r3, #64	; 0x40
 8001468:	f040 80b6 	bne.w	80015d8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10d      	bne.n	80014a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800148c:	d003      	beq.n	8001496 <HAL_I2C_EV_IRQHandler+0x62>
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001494:	d101      	bne.n	800149a <HAL_I2C_EV_IRQHandler+0x66>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_I2C_EV_IRQHandler+0x68>
 800149a:	2300      	movs	r3, #0
 800149c:	2b01      	cmp	r3, #1
 800149e:	f000 8127 	beq.w	80016f0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_I2C_EV_IRQHandler+0x92>
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	0a5b      	lsrs	r3, r3, #9
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f001 fb6a 	bl	8002b92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fd05 	bl	8001ece <I2C_Master_SB>
 80014c4:	e087      	b.n	80015d6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	0a5b      	lsrs	r3, r3, #9
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fd73 	bl	8001fca <I2C_Master_ADD10>
 80014e4:	e077      	b.n	80015d6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_I2C_EV_IRQHandler+0xd2>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	0a5b      	lsrs	r3, r3, #9
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fd8d 	bl	800201e <I2C_Master_ADDR>
 8001504:	e067      	b.n	80015d6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d030      	beq.n	8001574 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800151c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001520:	f000 80e8 	beq.w	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	09db      	lsrs	r3, r3, #7
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00f      	beq.n	8001550 <HAL_I2C_EV_IRQHandler+0x11c>
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	0a9b      	lsrs	r3, r3, #10
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <HAL_I2C_EV_IRQHandler+0x11c>
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f9e6 	bl	800191a <I2C_MasterTransmit_TXE>
 800154e:	e042      	b.n	80015d6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80cb 	beq.w	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	0a5b      	lsrs	r3, r3, #9
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80c4 	beq.w	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 facc 	bl	8001b0a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001572:	e0bf      	b.n	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001582:	f000 80b7 	beq.w	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00f      	beq.n	80015b2 <HAL_I2C_EV_IRQHandler+0x17e>
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	0a9b      	lsrs	r3, r3, #10
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_I2C_EV_IRQHandler+0x17e>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fb23 	bl	8001bf6 <I2C_MasterReceive_RXNE>
 80015b0:	e011      	b.n	80015d6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 809a 	beq.w	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	0a5b      	lsrs	r3, r3, #9
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8093 	beq.w	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fb93 	bl	8001cfa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d4:	e08e      	b.n	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
 80015d6:	e08d      	b.n	80016f4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	e007      	b.n	80015fa <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d012      	beq.n	800162c <HAL_I2C_EV_IRQHandler+0x1f8>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	0a5b      	lsrs	r3, r3, #9
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00c      	beq.n	800162c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 ff49 	bl	80024bc <I2C_Slave_ADDR>
 800162a:	e066      	b.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_I2C_EV_IRQHandler+0x218>
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	0a5b      	lsrs	r3, r3, #9
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 ff7d 	bl	8002544 <I2C_Slave_STOPF>
 800164a:	e056      	b.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800164c:	7bbb      	ldrb	r3, [r7, #14]
 800164e:	2b21      	cmp	r3, #33	; 0x21
 8001650:	d002      	beq.n	8001658 <HAL_I2C_EV_IRQHandler+0x224>
 8001652:	7bbb      	ldrb	r3, [r7, #14]
 8001654:	2b29      	cmp	r3, #41	; 0x29
 8001656:	d125      	bne.n	80016a4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	09db      	lsrs	r3, r3, #7
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00f      	beq.n	8001684 <HAL_I2C_EV_IRQHandler+0x250>
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	0a9b      	lsrs	r3, r3, #10
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <HAL_I2C_EV_IRQHandler+0x250>
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d103      	bne.n	8001684 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fe5f 	bl	8002340 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001682:	e039      	b.n	80016f8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d033      	beq.n	80016f8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	0a5b      	lsrs	r3, r3, #9
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d02d      	beq.n	80016f8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fe8c 	bl	80023ba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016a2:	e029      	b.n	80016f8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00f      	beq.n	80016d0 <HAL_I2C_EV_IRQHandler+0x29c>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	0a9b      	lsrs	r3, r3, #10
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d009      	beq.n	80016d0 <HAL_I2C_EV_IRQHandler+0x29c>
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fe97 	bl	80023fc <I2C_SlaveReceive_RXNE>
 80016ce:	e014      	b.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00e      	beq.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	0a5b      	lsrs	r3, r3, #9
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fec5 	bl	8002478 <I2C_SlaveReceive_BTF>
 80016ee:	e004      	b.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80016f0:	bf00      	nop
 80016f2:	e002      	b.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016f4:	bf00      	nop
 80016f6:	e000      	b.n	80016fa <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00e      	beq.n	8001746 <HAL_I2C_ER_IRQHandler+0x46>
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001744:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	0a5b      	lsrs	r3, r3, #9
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00e      	beq.n	8001770 <HAL_I2C_ER_IRQHandler+0x70>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d008      	beq.n	8001770 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800176e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	0a9b      	lsrs	r3, r3, #10
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d041      	beq.n	8001800 <HAL_I2C_ER_IRQHandler+0x100>
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d03b      	beq.n	8001800 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800178e:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017a6:	7efb      	ldrb	r3, [r7, #27]
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d112      	bne.n	80017d2 <HAL_I2C_ER_IRQHandler+0xd2>
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_I2C_ER_IRQHandler+0xd2>
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	2b21      	cmp	r3, #33	; 0x21
 80017b6:	d008      	beq.n	80017ca <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80017b8:	7cfb      	ldrb	r3, [r7, #19]
 80017ba:	2b29      	cmp	r3, #41	; 0x29
 80017bc:	d005      	beq.n	80017ca <HAL_I2C_ER_IRQHandler+0xca>
 80017be:	7cfb      	ldrb	r3, [r7, #19]
 80017c0:	2b28      	cmp	r3, #40	; 0x28
 80017c2:	d106      	bne.n	80017d2 <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b21      	cmp	r3, #33	; 0x21
 80017c8:	d103      	bne.n	80017d2 <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 ffea 	bl	80027a4 <I2C_Slave_AF>
 80017d0:	e016      	b.n	8001800 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017da:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d107      	bne.n	8001800 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	0adb      	lsrs	r3, r3, #11
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00e      	beq.n	800182a <HAL_I2C_ER_IRQHandler+0x12a>
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001828:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 f821 	bl	8002884 <I2C_ITError>
  }
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
 80018a6:	4613      	mov	r3, r2
 80018a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001928:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001930:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d150      	bne.n	80019e2 <I2C_MasterTransmit_TXE+0xc8>
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b21      	cmp	r3, #33	; 0x21
 8001944:	d14d      	bne.n	80019e2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d01d      	beq.n	8001988 <I2C_MasterTransmit_TXE+0x6e>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b20      	cmp	r3, #32
 8001950:	d01a      	beq.n	8001988 <I2C_MasterTransmit_TXE+0x6e>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001958:	d016      	beq.n	8001988 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001968:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2211      	movs	r2, #17
 800196e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff62 	bl	800184a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001986:	e0bc      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001996:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b40      	cmp	r3, #64	; 0x40
 80019c0:	d107      	bne.n	80019d2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff7d 	bl	80018ca <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019d0:	e097      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff35 	bl	800184a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019e0:	e08f      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b21      	cmp	r3, #33	; 0x21
 80019e6:	d007      	beq.n	80019f8 <I2C_MasterTransmit_TXE+0xde>
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	2b40      	cmp	r3, #64	; 0x40
 80019ec:	f040 8089 	bne.w	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b22      	cmp	r3, #34	; 0x22
 80019f4:	f040 8085 	bne.w	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a10:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a12:	e076      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b40      	cmp	r3, #64	; 0x40
 8001a1e:	d15d      	bne.n	8001adc <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11d      	bne.n	8001a64 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10b      	bne.n	8001a48 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a40:	1c9a      	adds	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a46:	e05c      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	121b      	asrs	r3, r3, #8
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a62:	e04e      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10b      	bne.n	8001a84 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a82:	e03e      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d13a      	bne.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b22      	cmp	r3, #34	; 0x22
 8001a96:	d108      	bne.n	8001aaa <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	e02b      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b21      	cmp	r3, #33	; 0x21
 8001ab4:	d125      	bne.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ada:	e012      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b00:	e7ff      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x1e8>
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b21      	cmp	r3, #33	; 0x21
 8001b22:	d164      	bne.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d012      	beq.n	8001b54 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001b52:	e04c      	b.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d01d      	beq.n	8001b96 <I2C_MasterTransmit_BTF+0x8c>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d01a      	beq.n	8001b96 <I2C_MasterTransmit_BTF+0x8c>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b66:	d016      	beq.n	8001b96 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b76:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2211      	movs	r2, #17
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe5b 	bl	800184a <HAL_I2C_MasterTxCpltCallback>
}
 8001b94:	e02b      	b.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ba4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	d107      	bne.n	8001be0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff fe76 	bl	80018ca <HAL_I2C_MemTxCpltCallback>
}
 8001bde:	e006      	b.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fe2e 	bl	800184a <HAL_I2C_MasterTxCpltCallback>
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b22      	cmp	r3, #34	; 0x22
 8001c08:	d173      	bne.n	8001cf2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d920      	bls.n	8001c5a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d154      	bne.n	8001cf2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c56:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001c58:	e04b      	b.n	8001cf2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d047      	beq.n	8001cf2 <I2C_MasterReceive_RXNE+0xfc>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d002      	beq.n	8001c6e <I2C_MasterReceive_RXNE+0x78>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d141      	bne.n	8001cf2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c8c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b40      	cmp	r3, #64	; 0x40
 8001cc6:	d10a      	bne.n	8001cde <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fe01 	bl	80018de <HAL_I2C_MemRxCpltCallback>
}
 8001cdc:	e009      	b.n	8001cf2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2212      	movs	r2, #18
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fdb6 	bl	800185e <HAL_I2C_MasterRxCpltCallback>
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d11b      	bne.n	8001d4a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d20:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d48:	e0bd      	b.n	8001ec6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d129      	bne.n	8001da8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d62:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d00a      	beq.n	8001d80 <I2C_MasterReceive_BTF+0x86>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d007      	beq.n	8001d80 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001da6:	e08e      	b.n	8001ec6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d176      	bne.n	8001ea0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d002      	beq.n	8001dbe <I2C_MasterReceive_BTF+0xc4>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d108      	bne.n	8001dd0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e019      	b.n	8001e04 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d002      	beq.n	8001ddc <I2C_MasterReceive_BTF+0xe2>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d108      	bne.n	8001dee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e00a      	b.n	8001e04 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d007      	beq.n	8001e04 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d10a      	bne.n	8001e8a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fd2b 	bl	80018de <HAL_I2C_MemRxCpltCallback>
}
 8001e88:	e01d      	b.n	8001ec6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2212      	movs	r2, #18
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fce0 	bl	800185e <HAL_I2C_MasterRxCpltCallback>
}
 8001e9e:	e012      	b.n	8001ec6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d117      	bne.n	8001f12 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001efa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001efc:	e05f      	b.n	8001fbe <I2C_Master_SB+0xf0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	611a      	str	r2, [r3, #16]
}
 8001f10:	e055      	b.n	8001fbe <I2C_Master_SB+0xf0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f1a:	d12b      	bne.n	8001f74 <I2C_Master_SB+0xa6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b21      	cmp	r3, #33	; 0x21
 8001f26:	d109      	bne.n	8001f3c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	e008      	b.n	8001f4e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d104      	bne.n	8001f62 <I2C_Master_SB+0x94>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d02d      	beq.n	8001fbe <I2C_Master_SB+0xf0>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f70:	605a      	str	r2, [r3, #4]
}
 8001f72:	e024      	b.n	8001fbe <I2C_Master_SB+0xf0>
      if (hi2c->EventCount == 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10e      	bne.n	8001f9a <I2C_Master_SB+0xcc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	11db      	asrs	r3, r3, #7
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f003 0306 	and.w	r3, r3, #6
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f063 030f 	orn	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	611a      	str	r2, [r3, #16]
}
 8001f98:	e011      	b.n	8001fbe <I2C_Master_SB+0xf0>
      else if (hi2c->EventCount == 1U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10d      	bne.n	8001fbe <I2C_Master_SB+0xf0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	11db      	asrs	r3, r3, #7
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f003 0306 	and.w	r3, r3, #6
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f063 030e 	orn	r3, r3, #14
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	611a      	str	r2, [r3, #16]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <I2C_Master_ADD10+0x24>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d011      	beq.n	8002012 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <I2C_Master_ADD10+0x38>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002010:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800201e:	b480      	push	{r7}
 8002020:	b091      	sub	sp, #68	; 0x44
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800202c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b22      	cmp	r3, #34	; 0x22
 8002046:	f040 8169 	bne.w	800231c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10f      	bne.n	8002072 <I2C_Master_ADDR+0x54>
 8002052:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d10b      	bne.n	8002072 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205a:	2300      	movs	r3, #0
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	e160      	b.n	8002334 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002076:	2b00      	cmp	r3, #0
 8002078:	d11d      	bne.n	80020b6 <I2C_Master_ADDR+0x98>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002082:	d118      	bne.n	80020b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	651a      	str	r2, [r3, #80]	; 0x50
 80020b4:	e13e      	b.n	8002334 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d113      	bne.n	80020e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c0:	2300      	movs	r3, #0
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e115      	b.n	8002314 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 808a 	bne.w	8002208 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020fa:	d137      	bne.n	800216c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800210a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800211a:	d113      	bne.n	8002144 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	e0e7      	b.n	8002314 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e0d3      	b.n	8002314 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	2b08      	cmp	r3, #8
 8002170:	d02e      	beq.n	80021d0 <I2C_Master_ADDR+0x1b2>
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002174:	2b20      	cmp	r3, #32
 8002176:	d02b      	beq.n	80021d0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	2b12      	cmp	r3, #18
 800217c:	d102      	bne.n	8002184 <I2C_Master_ADDR+0x166>
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	2b01      	cmp	r3, #1
 8002182:	d125      	bne.n	80021d0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00e      	beq.n	80021a8 <I2C_Master_ADDR+0x18a>
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	2b02      	cmp	r3, #2
 800218e:	d00b      	beq.n	80021a8 <I2C_Master_ADDR+0x18a>
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	2b10      	cmp	r3, #16
 8002194:	d008      	beq.n	80021a8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e007      	b.n	80021b8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021b6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	e0a1      	b.n	8002314 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e085      	b.n	8002314 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d14d      	bne.n	80022ae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	2b04      	cmp	r3, #4
 8002216:	d016      	beq.n	8002246 <I2C_Master_ADDR+0x228>
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	2b02      	cmp	r3, #2
 800221c:	d013      	beq.n	8002246 <I2C_Master_ADDR+0x228>
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	2b10      	cmp	r3, #16
 8002222:	d010      	beq.n	8002246 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002232:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e007      	b.n	8002256 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002254:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002264:	d117      	bne.n	8002296 <I2C_Master_ADDR+0x278>
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800226c:	d00b      	beq.n	8002286 <I2C_Master_ADDR+0x268>
 800226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002270:	2b01      	cmp	r3, #1
 8002272:	d008      	beq.n	8002286 <I2C_Master_ADDR+0x268>
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	2b08      	cmp	r3, #8
 8002278:	d005      	beq.n	8002286 <I2C_Master_ADDR+0x268>
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	2b10      	cmp	r3, #16
 800227e:	d002      	beq.n	8002286 <I2C_Master_ADDR+0x268>
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	2b20      	cmp	r3, #32
 8002284:	d107      	bne.n	8002296 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002294:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	e032      	b.n	8002314 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022bc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022cc:	d117      	bne.n	80022fe <I2C_Master_ADDR+0x2e0>
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022d4:	d00b      	beq.n	80022ee <I2C_Master_ADDR+0x2d0>
 80022d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d008      	beq.n	80022ee <I2C_Master_ADDR+0x2d0>
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d005      	beq.n	80022ee <I2C_Master_ADDR+0x2d0>
 80022e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d002      	beq.n	80022ee <I2C_Master_ADDR+0x2d0>
 80022e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d107      	bne.n	80022fe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800231a:	e00b      	b.n	8002334 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	e7ff      	b.n	8002334 <I2C_Master_ADDR+0x316>
 8002334:	bf00      	nop
 8002336:	3744      	adds	r7, #68	; 0x44
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d02b      	beq.n	80023b2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d114      	bne.n	80023b2 <I2C_SlaveTransmit_TXE+0x72>
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b29      	cmp	r3, #41	; 0x29
 800238c:	d111      	bne.n	80023b2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2228      	movs	r2, #40	; 0x28
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fa60 	bl	8001872 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d011      	beq.n	80023f0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02c      	beq.n	8002470 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d114      	bne.n	8002470 <I2C_SlaveReceive_RXNE+0x74>
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	2b2a      	cmp	r3, #42	; 0x2a
 800244a:	d111      	bne.n	8002470 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2222      	movs	r2, #34	; 0x22
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2228      	movs	r2, #40	; 0x28
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fa0b 	bl	8001886 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024d6:	2b28      	cmp	r3, #40	; 0x28
 80024d8:	d127      	bne.n	800252a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	09db      	lsrs	r3, r3, #7
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	81bb      	strh	r3, [r7, #12]
 800250c:	e002      	b.n	8002514 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800251c:	89ba      	ldrh	r2, [r7, #12]
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff f9b9 	bl	800189a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002528:	e008      	b.n	800253c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0202 	mvn.w	r2, #2
 8002532:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002562:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002590:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a0:	d172      	bne.n	8002688 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b22      	cmp	r3, #34	; 0x22
 80025a6:	d002      	beq.n	80025ae <I2C_Slave_STOPF+0x6a>
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b2a      	cmp	r3, #42	; 0x2a
 80025ac:	d135      	bne.n	800261a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fd5f 	bl	80010aa <HAL_DMA_GetState>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d049      	beq.n	8002686 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <I2C_Slave_STOPF+0x258>)
 80025f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fd31 	bl	8001066 <HAL_DMA_Abort_IT>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03d      	beq.n	8002686 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002614:	4610      	mov	r0, r2
 8002616:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002618:	e035      	b.n	8002686 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fd29 	bl	80010aa <HAL_DMA_GetState>
 8002658:	4603      	mov	r3, r0
 800265a:	2b01      	cmp	r3, #1
 800265c:	d014      	beq.n	8002688 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002662:	4a4e      	ldr	r2, [pc, #312]	; (800279c <I2C_Slave_STOPF+0x258>)
 8002664:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fcfb 	bl	8001066 <HAL_DMA_Abort_IT>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002680:	4610      	mov	r0, r2
 8002682:	4798      	blx	r3
 8002684:	e000      	b.n	8002688 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002686:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03e      	beq.n	8002710 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d112      	bne.n	80026c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d112      	bne.n	80026fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0204 	orr.w	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f8b3 	bl	8002884 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800271e:	e039      	b.n	8002794 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b2a      	cmp	r3, #42	; 0x2a
 8002724:	d109      	bne.n	800273a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2228      	movs	r2, #40	; 0x28
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff f8a6 	bl	8001886 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b28      	cmp	r3, #40	; 0x28
 8002744:	d111      	bne.n	800276a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <I2C_Slave_STOPF+0x25c>)
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff f8a7 	bl	80018b6 <HAL_I2C_ListenCpltCallback>
}
 8002768:	e014      	b.n	8002794 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	2b22      	cmp	r3, #34	; 0x22
 8002770:	d002      	beq.n	8002778 <I2C_Slave_STOPF+0x234>
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b22      	cmp	r3, #34	; 0x22
 8002776:	d10d      	bne.n	8002794 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff f879 	bl	8001886 <HAL_I2C_SlaveRxCpltCallback>
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08002ab5 	.word	0x08002ab5
 80027a0:	ffff0000 	.word	0xffff0000

080027a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d002      	beq.n	80027c6 <I2C_Slave_AF+0x22>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d129      	bne.n	800281a <I2C_Slave_AF+0x76>
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b28      	cmp	r3, #40	; 0x28
 80027ca:	d126      	bne.n	800281a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a2c      	ldr	r2, [pc, #176]	; (8002880 <I2C_Slave_AF+0xdc>)
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff f84f 	bl	80018b6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002818:	e02e      	b.n	8002878 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b21      	cmp	r3, #33	; 0x21
 800281e:	d126      	bne.n	800286e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a17      	ldr	r2, [pc, #92]	; (8002880 <I2C_Slave_AF+0xdc>)
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2221      	movs	r2, #33	; 0x21
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800284a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002854:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002864:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff f803 	bl	8001872 <HAL_I2C_SlaveTxCpltCallback>
}
 800286c:	e004      	b.n	8002878 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002876:	615a      	str	r2, [r3, #20]
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	ffff0000 	.word	0xffff0000

08002884 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b10      	cmp	r3, #16
 800289e:	d10a      	bne.n	80028b6 <I2C_ITError+0x32>
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b22      	cmp	r3, #34	; 0x22
 80028a4:	d107      	bne.n	80028b6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028bc:	2b28      	cmp	r3, #40	; 0x28
 80028be:	d107      	bne.n	80028d0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2228      	movs	r2, #40	; 0x28
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ce:	e015      	b.n	80028fc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028de:	d006      	beq.n	80028ee <I2C_ITError+0x6a>
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b60      	cmp	r3, #96	; 0x60
 80028e4:	d003      	beq.n	80028ee <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290a:	d162      	bne.n	80029d2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d020      	beq.n	800296c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	4a5f      	ldr	r2, [pc, #380]	; (8002aac <I2C_ITError+0x228>)
 8002930:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fb95 	bl	8001066 <HAL_DMA_Abort_IT>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8089 	beq.w	8002a56 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002966:	4610      	mov	r0, r2
 8002968:	4798      	blx	r3
 800296a:	e074      	b.n	8002a56 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <I2C_ITError+0x228>)
 8002972:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fb74 	bl	8001066 <HAL_DMA_Abort_IT>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d068      	beq.n	8002a56 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d10b      	bne.n	80029aa <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029cc:	4610      	mov	r0, r2
 80029ce:	4798      	blx	r3
 80029d0:	e041      	b.n	8002a56 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b60      	cmp	r3, #96	; 0x60
 80029dc:	d125      	bne.n	8002a2a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d10b      	bne.n	8002a12 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe ff6f 	bl	8001906 <HAL_I2C_AbortCpltCallback>
 8002a28:	e015      	b.n	8002a56 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d10b      	bne.n	8002a50 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7fe ff4e 	bl	80018f2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d11b      	bne.n	8002aa2 <I2C_ITError+0x21e>
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b28      	cmp	r3, #40	; 0x28
 8002a6e:	d118      	bne.n	8002aa2 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a7e:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <I2C_ITError+0x22c>)
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe ff0a 	bl	80018b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	08002ab5 	.word	0x08002ab5
 8002ab0:	ffff0000 	.word	0xffff0000

08002ab4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	2200      	movs	r2, #0
 8002ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	2200      	movs	r2, #0
 8002af6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	2200      	movs	r2, #0
 8002afe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d10e      	bne.n	8002b3a <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7fe fee7 	bl	8001906 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b38:	e027      	b.n	8002b8a <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b40:	2b28      	cmp	r3, #40	; 0x28
 8002b42:	d117      	bne.n	8002b74 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2228      	movs	r2, #40	; 0x28
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b72:	e007      	b.n	8002b84 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7fe feb4 	bl	80018f2 <HAL_I2C_ErrorCallback>
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ba2:	d103      	bne.n	8002bac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002baa:	e007      	b.n	8002bbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002bb4:	d102      	bne.n	8002bbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e22a      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d075      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be6:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b7e      	ldr	r3, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x108>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e205      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x74>
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6c      	ldr	r2, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c60:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe f8b0 	bl	8000de4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe f8ac 	bl	8000de4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1ca      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xc0>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f89c 	bl	8000de4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f898 	bl	8000de4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1b6      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b51      	ldr	r3, [pc, #324]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xe8>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e18a      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4937      	ldr	r1, [pc, #220]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f851 	bl	8000de4 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe f84d 	bl	8000de4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e16b      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4925      	ldr	r1, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe f830 	bl	8000de4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe f82c 	bl	8000de4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e14a      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d036      	beq.n	8002e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f810 	bl	8000de4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fe f80c 	bl	8000de4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e12a      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x200>
 8002de6:	e01b      	b.n	8002e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fd fff9 	bl	8000de4 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e00e      	b.n	8002e14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fd fff5 	bl	8000de4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d907      	bls.n	8002e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e113      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ea      	bne.n	8002df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8097 	beq.w	8002f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b77      	ldr	r3, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b74      	ldr	r3, [pc, #464]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a73      	ldr	r2, [pc, #460]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fd ffb5 	bl	8000de4 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fd ffb1 	bl	8000de4 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0cf      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2ea>
 8002ea4:	4b64      	ldr	r3, [pc, #400]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a63      	ldr	r2, [pc, #396]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e01c      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x30c>
 8002eba:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	4b55      	ldr	r3, [pc, #340]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fd ff76 	bl	8000de4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fd ff72 	bl	8000de4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e08e      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	4b49      	ldr	r3, [pc, #292]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RCC_OscConfig+0x334>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7fd ff60 	bl	8000de4 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fd ff5c 	bl	8000de4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e078      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d064      	beq.n	800302e <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d05c      	beq.n	800302a <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d141      	bne.n	8002ffc <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fd ff31 	bl	8000de4 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fd ff2d 	bl	8000de4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e04b      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	019b      	lsls	r3, r3, #6
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	491b      	ldr	r1, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd ff06 	bl	8000de4 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fd ff02 	bl	8000de4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e020      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x414>
 8002ffa:	e018      	b.n	800302e <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd feef 	bl	8000de4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300a:	f7fd feeb 	bl	8000de4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e009      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x442>
 8003028:	e001      	b.n	800302e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
 8003040:	42470060 	.word	0x42470060

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ca      	b.n	80031ee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d90c      	bls.n	8003080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b64      	ldr	r3, [pc, #400]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b62      	ldr	r3, [pc, #392]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b6      	b.n	80031ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b58      	ldr	r3, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a57      	ldr	r2, [pc, #348]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800309e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b52      	ldr	r3, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a51      	ldr	r2, [pc, #324]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494c      	ldr	r1, [pc, #304]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d044      	beq.n	8003164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d119      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07d      	b.n	80031ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06d      	b.n	80031ee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e065      	b.n	80031ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4933      	ldr	r1, [pc, #204]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003134:	f7fd fe56 	bl	8000de4 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fd fe52 	bl	8000de4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04d      	b.n	80031ee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d20c      	bcs.n	800318c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e030      	b.n	80031ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4915      	ldr	r1, [pc, #84]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490d      	ldr	r1, [pc, #52]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f81d 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4909      	ldr	r1, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80031e6:	200f      	movs	r0, #15
 80031e8:	f7fd fdb8 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	08005b6c 	.word	0x08005b6c
 8003204:	20000008 	.word	0x20000008

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800320c:	b094      	sub	sp, #80	; 0x50
 800320e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	647b      	str	r3, [r7, #68]	; 0x44
 8003214:	2300      	movs	r3, #0
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003218:	2300      	movs	r3, #0
 800321a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003220:	4b79      	ldr	r3, [pc, #484]	; (8003408 <HAL_RCC_GetSysClockFreq+0x200>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d00d      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x40>
 800322c:	2b08      	cmp	r3, #8
 800322e:	f200 80e1 	bhi.w	80033f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x34>
 8003236:	2b04      	cmp	r3, #4
 8003238:	d003      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x3a>
 800323a:	e0db      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b73      	ldr	r3, [pc, #460]	; (800340c <HAL_RCC_GetSysClockFreq+0x204>)
 800323e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003240:	e0db      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003242:	4b73      	ldr	r3, [pc, #460]	; (8003410 <HAL_RCC_GetSysClockFreq+0x208>)
 8003244:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003246:	e0d8      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003248:	4b6f      	ldr	r3, [pc, #444]	; (8003408 <HAL_RCC_GetSysClockFreq+0x200>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003250:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003252:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_GetSysClockFreq+0x200>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325e:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_GetSysClockFreq+0x200>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	2200      	movs	r2, #0
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
 8003268:	63fa      	str	r2, [r7, #60]	; 0x3c
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
 8003272:	2300      	movs	r3, #0
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
 8003276:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800327a:	4622      	mov	r2, r4
 800327c:	462b      	mov	r3, r5
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800328c:	0150      	lsls	r0, r2, #5
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4621      	mov	r1, r4
 8003294:	1a51      	subs	r1, r2, r1
 8003296:	6139      	str	r1, [r7, #16]
 8003298:	4629      	mov	r1, r5
 800329a:	eb63 0301 	sbc.w	r3, r3, r1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ac:	4659      	mov	r1, fp
 80032ae:	018b      	lsls	r3, r1, #6
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032b6:	4651      	mov	r1, sl
 80032b8:	018a      	lsls	r2, r1, #6
 80032ba:	4651      	mov	r1, sl
 80032bc:	ebb2 0801 	subs.w	r8, r2, r1
 80032c0:	4659      	mov	r1, fp
 80032c2:	eb63 0901 	sbc.w	r9, r3, r1
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032da:	4690      	mov	r8, r2
 80032dc:	4699      	mov	r9, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	eb18 0303 	adds.w	r3, r8, r3
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	462b      	mov	r3, r5
 80032e8:	eb49 0303 	adc.w	r3, r9, r3
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032fa:	4629      	mov	r1, r5
 80032fc:	024b      	lsls	r3, r1, #9
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003304:	4621      	mov	r1, r4
 8003306:	024a      	lsls	r2, r1, #9
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330e:	2200      	movs	r2, #0
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
 8003312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003314:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003318:	f7fd fb7c 	bl	8000a14 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003324:	e058      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b38      	ldr	r3, [pc, #224]	; (8003408 <HAL_RCC_GetSysClockFreq+0x200>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	2200      	movs	r2, #0
 800332e:	4618      	mov	r0, r3
 8003330:	4611      	mov	r1, r2
 8003332:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	0159      	lsls	r1, r3, #5
 800334e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003352:	0150      	lsls	r0, r2, #5
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4641      	mov	r1, r8
 800335a:	ebb2 0a01 	subs.w	sl, r2, r1
 800335e:	4649      	mov	r1, r9
 8003360:	eb63 0b01 	sbc.w	fp, r3, r1
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003370:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003374:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003378:	ebb2 040a 	subs.w	r4, r2, sl
 800337c:	eb63 050b 	sbc.w	r5, r3, fp
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	00eb      	lsls	r3, r5, #3
 800338a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800338e:	00e2      	lsls	r2, r4, #3
 8003390:	4614      	mov	r4, r2
 8003392:	461d      	mov	r5, r3
 8003394:	4643      	mov	r3, r8
 8003396:	18e3      	adds	r3, r4, r3
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	464b      	mov	r3, r9
 800339c:	eb45 0303 	adc.w	r3, r5, r3
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ae:	4629      	mov	r1, r5
 80033b0:	028b      	lsls	r3, r1, #10
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b8:	4621      	mov	r1, r4
 80033ba:	028a      	lsls	r2, r1, #10
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	61fa      	str	r2, [r7, #28]
 80033c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033cc:	f7fd fb22 	bl	8000a14 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_GetSysClockFreq+0x200>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	3301      	adds	r3, #1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetSysClockFreq+0x204>)
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3750      	adds	r7, #80	; 0x50
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	00f42400 	.word	0x00f42400
 8003410:	007a1200 	.word	0x007a1200

08003414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_RCC_GetHCLKFreq+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000008 	.word	0x20000008

0800342c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003430:	f7ff fff0 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0a9b      	lsrs	r3, r3, #10
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	08005b7c 	.word	0x08005b7c

08003454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003458:	f7ff ffdc 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0b5b      	lsrs	r3, r3, #13
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	08005b7c 	.word	0x08005b7c

0800347c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d122      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d11b      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0202 	mvn.w	r2, #2
 80034a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f8ee 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8e0 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8f1 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d122      	bne.n	800352c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d11b      	bne.n	800352c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0204 	mvn.w	r2, #4
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8c4 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8b6 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8c7 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0208 	mvn.w	r2, #8
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f89a 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f88c 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f89d 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b10      	cmp	r3, #16
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b10      	cmp	r3, #16
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0210 	mvn.w	r2, #16
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2208      	movs	r2, #8
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f870 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f862 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f873 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0201 	mvn.w	r2, #1
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f001 fa24 	bl	8004a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d10e      	bne.n	800362c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d107      	bne.n	800362c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f862 	bl	80036f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d107      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f838 	bl	80036c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0220 	mvn.w	r2, #32
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f82c 	bl	80036dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e03f      	b.n	8003796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f837 	bl	800379e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fb9b 	bl	8003e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800377c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b088      	sub	sp, #32
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	f040 8083 	bne.w	80038da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Transmit+0x2e>
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e07b      	b.n	80038dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Transmit+0x40>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e074      	b.n	80038dc <HAL_UART_Transmit+0x12a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2221      	movs	r2, #33	; 0x21
 8003804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003808:	f7fd faec 	bl	8000de4 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800381a:	e042      	b.n	80038a2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	d122      	bne.n	800387a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f9b4 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e046      	b.n	80038dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003860:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3302      	adds	r3, #2
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	e017      	b.n	80038a2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3301      	adds	r3, #1
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e013      	b.n	80038a2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f991 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e023      	b.n	80038dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	60ba      	str	r2, [r7, #8]
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1b7      	bne.n	800381c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	2140      	movs	r1, #64	; 0x40
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f978 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e00a      	b.n	80038dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d140      	bne.n	8003980 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_UART_Receive_IT+0x26>
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e039      	b.n	8003982 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_UART_Receive_IT+0x38>
 8003918:	2302      	movs	r3, #2
 800391a:	e032      	b.n	8003982 <HAL_UART_Receive_IT+0x9e>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2222      	movs	r2, #34	; 0x22
 8003940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800395a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0220 	orr.w	r2, r2, #32
 800397a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_UART_IRQHandler+0x52>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9d0 	bl	8003d80 <UART_Receive_IT>
      return;
 80039e0:	e0cb      	b.n	8003b7a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80ab 	beq.w	8003b40 <HAL_UART_IRQHandler+0x1b0>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <HAL_UART_IRQHandler+0x70>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a0 	beq.w	8003b40 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_UART_IRQHandler+0x90>
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	f043 0201 	orr.w	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_UART_IRQHandler+0xb0>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	f043 0202 	orr.w	r2, r3, #2
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_UART_IRQHandler+0xd0>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_UART_IRQHandler+0xf0>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	f043 0208 	orr.w	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d077      	beq.n	8003b78 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x112>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f96f 	bl	8003d80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <HAL_UART_IRQHandler+0x13a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d031      	beq.n	8003b2e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8b8 	bl	8003c40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d123      	bne.n	8003b26 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <HAL_UART_IRQHandler+0x1f0>)
 8003afc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd faaf 	bl	8001066 <HAL_DMA_Abort_IT>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00e      	b.n	8003b3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f83a 	bl	8003b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e00a      	b.n	8003b3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f836 	bl	8003b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e006      	b.n	8003b3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f832 	bl	8003b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b3a:	e01d      	b.n	8003b78 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	bf00      	nop
    return;
 8003b3e:	e01b      	b.n	8003b78 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_UART_IRQHandler+0x1cc>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8a5 	bl	8003ca4 <UART_Transmit_IT>
    return;
 8003b5a:	e00e      	b.n	8003b7a <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1ea>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8ed 	bl	8003d50 <UART_EndTransmit_IT>
    return;
 8003b76:	e000      	b.n	8003b7a <HAL_UART_IRQHandler+0x1ea>
    return;
 8003b78:	bf00      	nop
  }
}
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	08003c7d 	.word	0x08003c7d

08003b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	e02c      	b.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc4:	d028      	beq.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bcc:	f7fd f90a 	bl	8000de4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d21d      	bcs.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e00f      	b.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d0c3      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff7e 	bl	8003b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	d144      	bne.n	8003d42 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d11a      	bne.n	8003cf8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]
 8003cea:	e00e      	b.n	8003d0a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	621a      	str	r2, [r3, #32]
 8003cf6:	e008      	b.n	8003d0a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	1c59      	adds	r1, r3, #1
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6211      	str	r1, [r2, #32]
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4619      	mov	r1, r3
 8003d18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff07 	bl	8003b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b22      	cmp	r3, #34	; 0x22
 8003d92:	d171      	bne.n	8003e78 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d123      	bne.n	8003de6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10e      	bne.n	8003dca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc8:	e029      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
 8003de4:	e01b      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6858      	ldr	r0, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	1c59      	adds	r1, r3, #1
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6291      	str	r1, [r2, #40]	; 0x28
 8003dfe:	b2c2      	uxtb	r2, r0
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e00c      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	1c58      	adds	r0, r3, #1
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	6288      	str	r0, [r1, #40]	; 0x28
 8003e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d120      	bne.n	8003e74 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0220 	bic.w	r2, r2, #32
 8003e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 fa5e 	bl	800532c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e002      	b.n	8003e7a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e84:	b5b0      	push	{r4, r5, r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ec4:	f023 030c 	bic.w	r3, r3, #12
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef0:	f040 80e4 	bne.w	80040bc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4aab      	ldr	r2, [pc, #684]	; (80041a8 <UART_SetConfig+0x324>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <UART_SetConfig+0x84>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4aaa      	ldr	r2, [pc, #680]	; (80041ac <UART_SetConfig+0x328>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d16c      	bne.n	8003fe2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f08:	f7ff faa4 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	4aa3      	ldr	r2, [pc, #652]	; (80041b0 <UART_SetConfig+0x32c>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	011c      	lsls	r4, r3, #4
 8003f2c:	f7ff fa92 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009a      	lsls	r2, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f46:	f7ff fa85 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009a      	lsls	r2, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	4a93      	ldr	r2, [pc, #588]	; (80041b0 <UART_SetConfig+0x32c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2264      	movs	r2, #100	; 0x64
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	1aeb      	subs	r3, r5, r3
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a8e      	ldr	r2, [pc, #568]	; (80041b0 <UART_SetConfig+0x32c>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f82:	441c      	add	r4, r3
 8003f84:	f7ff fa66 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f9e:	f7ff fa59 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009a      	lsls	r2, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	4a7d      	ldr	r2, [pc, #500]	; (80041b0 <UART_SetConfig+0x32c>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2264      	movs	r2, #100	; 0x64
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	1aeb      	subs	r3, r5, r3
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a78      	ldr	r2, [pc, #480]	; (80041b0 <UART_SetConfig+0x32c>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 0207 	and.w	r2, r3, #7
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4422      	add	r2, r4
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	e154      	b.n	800428c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003fe2:	f7ff fa23 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	4a6c      	ldr	r2, [pc, #432]	; (80041b0 <UART_SetConfig+0x32c>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	011c      	lsls	r4, r3, #4
 8004006:	f7ff fa11 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 800400a:	4602      	mov	r2, r0
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004020:	f7ff fa04 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8004024:	4602      	mov	r2, r0
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	4a5d      	ldr	r2, [pc, #372]	; (80041b0 <UART_SetConfig+0x32c>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2264      	movs	r2, #100	; 0x64
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	1aeb      	subs	r3, r5, r3
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	3332      	adds	r3, #50	; 0x32
 800404e:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <UART_SetConfig+0x32c>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800405c:	441c      	add	r4, r3
 800405e:	f7ff f9e5 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8004062:	4602      	mov	r2, r0
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fbb2 f5f3 	udiv	r5, r2, r3
 8004078:	f7ff f9d8 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 800407c:	4602      	mov	r2, r0
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009a      	lsls	r2, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4a47      	ldr	r2, [pc, #284]	; (80041b0 <UART_SetConfig+0x32c>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2264      	movs	r2, #100	; 0x64
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	1aeb      	subs	r3, r5, r3
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	4a42      	ldr	r2, [pc, #264]	; (80041b0 <UART_SetConfig+0x32c>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4422      	add	r2, r4
 80040b8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80040ba:	e0e7      	b.n	800428c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a39      	ldr	r2, [pc, #228]	; (80041a8 <UART_SetConfig+0x324>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <UART_SetConfig+0x24c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <UART_SetConfig+0x328>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d171      	bne.n	80041b4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80040d0:	f7ff f9c0 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009a      	lsls	r2, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <UART_SetConfig+0x32c>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	011c      	lsls	r4, r3, #4
 80040f4:	f7ff f9ae 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fbb2 f5f3 	udiv	r5, r2, r3
 800410e:	f7ff f9a1 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8004112:	4602      	mov	r2, r0
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009a      	lsls	r2, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <UART_SetConfig+0x32c>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2264      	movs	r2, #100	; 0x64
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	1aeb      	subs	r3, r5, r3
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	3332      	adds	r3, #50	; 0x32
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <UART_SetConfig+0x32c>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004148:	441c      	add	r4, r3
 800414a:	f7ff f983 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 800414e:	4602      	mov	r2, r0
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009a      	lsls	r2, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	fbb2 f5f3 	udiv	r5, r2, r3
 8004164:	f7ff f976 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8004168:	4602      	mov	r2, r0
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009a      	lsls	r2, r3, #2
 8004172:	441a      	add	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <UART_SetConfig+0x32c>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2264      	movs	r2, #100	; 0x64
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	1aeb      	subs	r3, r5, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <UART_SetConfig+0x32c>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4422      	add	r2, r4
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	e071      	b.n	800428c <UART_SetConfig+0x408>
 80041a8:	40011000 	.word	0x40011000
 80041ac:	40011400 	.word	0x40011400
 80041b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80041b4:	f7ff f93a 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009a      	lsls	r2, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	4a31      	ldr	r2, [pc, #196]	; (8004294 <UART_SetConfig+0x410>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	011c      	lsls	r4, r3, #4
 80041d8:	f7ff f928 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009a      	lsls	r2, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80041f2:	f7ff f91b 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009a      	lsls	r2, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <UART_SetConfig+0x410>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2264      	movs	r2, #100	; 0x64
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	1aeb      	subs	r3, r5, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	3332      	adds	r3, #50	; 0x32
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <UART_SetConfig+0x410>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422c:	441c      	add	r4, r3
 800422e:	f7ff f8fd 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8004232:	4602      	mov	r2, r0
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009a      	lsls	r2, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	fbb2 f5f3 	udiv	r5, r2, r3
 8004248:	f7ff f8f0 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 800424c:	4602      	mov	r2, r0
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009a      	lsls	r2, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <UART_SetConfig+0x410>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2264      	movs	r2, #100	; 0x64
 800426c:	fb02 f303 	mul.w	r3, r2, r3
 8004270:	1aeb      	subs	r3, r5, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a07      	ldr	r2, [pc, #28]	; (8004294 <UART_SetConfig+0x410>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 020f 	and.w	r2, r3, #15
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4422      	add	r2, r4
 8004288:	609a      	str	r2, [r3, #8]
}
 800428a:	e7ff      	b.n	800428c <UART_SetConfig+0x408>
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bdb0      	pop	{r4, r5, r7, pc}
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <SystemClock_Config>:
#include "SystemClock.h"

HAL_StatusTypeDef SystemClock_Config(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b094      	sub	sp, #80	; 0x50
 800429c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef status;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	4b27      	ldr	r3, [pc, #156]	; (8004340 <SystemClock_Config+0xa8>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a26      	ldr	r2, [pc, #152]	; (8004340 <SystemClock_Config+0xa8>)
 80042a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
 80042ae:	4b24      	ldr	r3, [pc, #144]	; (8004340 <SystemClock_Config+0xa8>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	607b      	str	r3, [r7, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80042ba:	2300      	movs	r3, #0
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <SystemClock_Config+0xac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80042c6:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <SystemClock_Config+0xac>)
 80042c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <SystemClock_Config+0xac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042da:	2302      	movs	r3, #2
 80042dc:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042de:	2301      	movs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80042e2:	2310      	movs	r3, #16
 80042e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042e6:	2302      	movs	r3, #2
 80042e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 16;
 80042ee:	2310      	movs	r3, #16
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 336;
 80042f2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80042f8:	2304      	movs	r3, #4
 80042fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80042fc:	2307      	movs	r3, #7
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
  status = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fc5f 	bl	8002bc8 <HAL_RCC_OscConfig>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004310:	230f      	movs	r3, #15
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004314:	2302      	movs	r3, #2
 8004316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004318:	2300      	movs	r3, #0
 800431a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800431c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004320:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004322:	2300      	movs	r3, #0
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004326:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800432a:	2102      	movs	r1, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fe89 	bl	8003044 <HAL_RCC_ClockConfig>

  return status;
 8004332:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f

}
 8004336:	4618      	mov	r0, r3
 8004338:	3750      	adds	r7, #80	; 0x50
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000

08004348 <dxl_getPresentVelocity>:
	}
}

//==============================================================
int32_t dxl_getPresentVelocity(int id)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af04      	add	r7, sp, #16
 800434e:	6078      	str	r0, [r7, #4]
	dxl_sendPacket(id, INST_READ, 4, DXL_BYTE_1(XL_PRESENT_VELOCITY),DXL_BYTE_2(XL_PRESENT_VELOCITY), 0x04,0x00 );
 8004350:	2300      	movs	r3, #0
 8004352:	9302      	str	r3, [sp, #8]
 8004354:	2304      	movs	r3, #4
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	2300      	movs	r3, #0
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	2204      	movs	r2, #4
 8004360:	2102      	movs	r1, #2
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8b2 	bl	80044cc <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004368:	200a      	movs	r0, #10
 800436a:	f7fc fd47 	bl	8000dfc <HAL_Delay>
	dxl_readPacket();
 800436e:	f000 f9c5 	bl	80046fc <dxl_readPacket>
	if(param[0]==0x00){
 8004372:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <dxl_getPresentVelocity+0x5c>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10e      	bne.n	8004398 <dxl_getPresentVelocity+0x50>
		return (uint32_t)param[4]<<24 | (uint32_t)param[3]<<16 | (uint32_t)param[2]<<8 | (uint32_t)param[1];
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <dxl_getPresentVelocity+0x5c>)
 800437c:	791b      	ldrb	r3, [r3, #4]
 800437e:	061a      	lsls	r2, r3, #24
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <dxl_getPresentVelocity+0x5c>)
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <dxl_getPresentVelocity+0x5c>)
 800438a:	789b      	ldrb	r3, [r3, #2]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	4313      	orrs	r3, r2
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <dxl_getPresentVelocity+0x5c>)
 8004392:	7852      	ldrb	r2, [r2, #1]
 8004394:	4313      	orrs	r3, r2
 8004396:	e001      	b.n	800439c <dxl_getPresentVelocity+0x54>
	}
	else {
		return -1 ;
 8004398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	2000003c 	.word	0x2000003c

080043a8 <dxl_LED>:
    HAL_Delay(DXL_DELAY);
#endif
}
//==============================================================
void dxl_LED(int id, char val )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_LED), DXL_BYTE_2(XL_LED), val );
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	2300      	movs	r3, #0
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2341      	movs	r3, #65	; 0x41
 80043be:	2203      	movs	r2, #3
 80043c0:	2103      	movs	r1, #3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f882 	bl	80044cc <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 80043c8:	200a      	movs	r0, #10
 80043ca:	f7fc fd17 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <dxl_torque>:
//==============================================================
void dxl_torque(int id, char val)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af02      	add	r7, sp, #8
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_TORQUE), DXL_BYTE_2(XL_TORQUE), val );
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	2203      	movs	r2, #3
 80043ee:	2103      	movs	r1, #3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f86b 	bl	80044cc <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 80043f6:	200a      	movs	r0, #10
 80043f8:	f7fc fd00 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <dxl_setOperatingMode>:
//==============================================================
void dxl_setOperatingMode(int id, char val)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af02      	add	r7, sp, #8
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_OPERATING_MODE), DXL_BYTE_2(XL_OPERATING_MODE), val );
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	230b      	movs	r3, #11
 800441a:	2203      	movs	r2, #3
 800441c:	2103      	movs	r1, #3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f854 	bl	80044cc <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004424:	200a      	movs	r0, #10
 8004426:	f7fc fce9 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <dxl_setGoalVelocity>:
#endif
}

//==============================================================
void dxl_setGoalVelocity(int id, int val)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af06      	add	r7, sp, #24
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004440:	461a      	mov	r2, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004448:	4619      	mov	r1, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004450:	4618      	mov	r0, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	9003      	str	r0, [sp, #12]
 800445c:	9102      	str	r1, [sp, #8]
 800445e:	9201      	str	r2, [sp, #4]
 8004460:	2300      	movs	r3, #0
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2368      	movs	r3, #104	; 0x68
 8004466:	2206      	movs	r2, #6
 8004468:	2103      	movs	r1, #3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f82e 	bl	80044cc <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004470:	200a      	movs	r0, #10
 8004472:	f7fc fcc3 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <dxl_setGoalPosition>:
//==============================================================
void dxl_setGoalPosition(int id, int val)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b088      	sub	sp, #32
 8004482:	af06      	add	r7, sp, #24
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_POSITION), DXL_BYTE_2(XL_GOAL_POSITION),
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_POSITION), DXL_BYTE_2(XL_GOAL_POSITION),
 800448c:	461a      	mov	r2, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_POSITION), DXL_BYTE_2(XL_GOAL_POSITION),
 8004494:	4619      	mov	r1, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_POSITION), DXL_BYTE_2(XL_GOAL_POSITION),
 800449c:	4618      	mov	r0, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_POSITION), DXL_BYTE_2(XL_GOAL_POSITION),
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	9003      	str	r0, [sp, #12]
 80044a8:	9102      	str	r1, [sp, #8]
 80044aa:	9201      	str	r2, [sp, #4]
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2374      	movs	r3, #116	; 0x74
 80044b2:	2206      	movs	r2, #6
 80044b4:	2103      	movs	r1, #3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f808 	bl	80044cc <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 80044bc:	200a      	movs	r0, #10
 80044be:	f7fc fc9d 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <dxl_sendPacket>:
//==============================================================
int dxl_sendPacket(int id, int instruction, int parameter_data_size, ...)
{
 80044cc:	b40c      	push	{r2, r3}
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b094      	sub	sp, #80	; 0x50
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
	uint8_t frame_to_write[50];
	uint16_t crc;
	uint32_t length=3+parameter_data_size;
 80044d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044da:	3303      	adds	r3, #3
 80044dc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t arg;

	frame_to_write[0] = 0xFF;
 80044de:	23ff      	movs	r3, #255	; 0xff
 80044e0:	743b      	strb	r3, [r7, #16]
	frame_to_write[1] = 0xFF;
 80044e2:	23ff      	movs	r3, #255	; 0xff
 80044e4:	747b      	strb	r3, [r7, #17]
	frame_to_write[2] = 0xFD;
 80044e6:	23fd      	movs	r3, #253	; 0xfd
 80044e8:	74bb      	strb	r3, [r7, #18]
	frame_to_write[3] = 0x00;	// RESERVED
 80044ea:	2300      	movs	r3, #0
 80044ec:	74fb      	strb	r3, [r7, #19]
	frame_to_write[4] = id;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	753b      	strb	r3, [r7, #20]
	frame_to_write[5] = length&0xFF;		// length_LB
 80044f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	757b      	strb	r3, [r7, #21]
	frame_to_write[6] = (length>>8)&0xFF;		// length_HB
 80044fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	75bb      	strb	r3, [r7, #22]
	frame_to_write[7] = instruction;		// Instruction : Write
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	75fb      	strb	r3, [r7, #23]

    va_list args;
    va_start(args, parameter_data_size);
 8004508:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800450c:	60fb      	str	r3, [r7, #12]
	for(int i=0 ; i < parameter_data_size ; i++ )
 800450e:	2300      	movs	r3, #0
 8004510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004512:	e010      	b.n	8004536 <dxl_sendPacket+0x6a>
	{
	arg = va_arg(args, int);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	60fa      	str	r2, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	frame_to_write[8+i]= arg;
 8004520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004522:	3308      	adds	r3, #8
 8004524:	3350      	adds	r3, #80	; 0x50
 8004526:	443b      	add	r3, r7
 8004528:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800452c:	f803 2c40 	strb.w	r2, [r3, #-64]
	for(int i=0 ; i < parameter_data_size ; i++ )
 8004530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004532:	3301      	adds	r3, #1
 8004534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004536:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800453a:	429a      	cmp	r2, r3
 800453c:	dbea      	blt.n	8004514 <dxl_sendPacket+0x48>
	}
	crc = dxl_updateCRC(0,frame_to_write,8+parameter_data_size);
 800453e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004540:	b29b      	uxth	r3, r3
 8004542:	3308      	adds	r3, #8
 8004544:	b29a      	uxth	r2, r3
 8004546:	f107 0310 	add.w	r3, r7, #16
 800454a:	4619      	mov	r1, r3
 800454c:	2000      	movs	r0, #0
 800454e:	f000 f837 	bl	80045c0 <dxl_updateCRC>
 8004552:	4603      	mov	r3, r0
 8004554:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	frame_to_write[8+parameter_data_size]= (uint8_t) ( crc & 0xFF );
 8004558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800455a:	3308      	adds	r3, #8
 800455c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	3350      	adds	r3, #80	; 0x50
 8004564:	443b      	add	r3, r7
 8004566:	f803 2c40 	strb.w	r2, [r3, #-64]
	frame_to_write[9+parameter_data_size]= (uint8_t) ( (crc>>8) & 0xFF );
 800456a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29a      	uxth	r2, r3
 8004572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004574:	3309      	adds	r3, #9
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	3350      	adds	r3, #80	; 0x50
 800457a:	443b      	add	r3, r7
 800457c:	f803 2c40 	strb.w	r2, [r3, #-64]
	va_end(args);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8004580:	2201      	movs	r2, #1
 8004582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004586:	480d      	ldr	r0, [pc, #52]	; (80045bc <dxl_sendPacket+0xf0>)
 8004588:	f7fc ff22 	bl	80013d0 <HAL_GPIO_WritePin>
	sendFrame(frame_to_write,parameter_data_size+2+8);
 800458c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458e:	f103 020a 	add.w	r2, r3, #10
 8004592:	f107 0310 	add.w	r3, r7, #16
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 ff1d 	bl	80053d8 <sendFrame>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 800459e:	2200      	movs	r2, #0
 80045a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045a4:	4805      	ldr	r0, [pc, #20]	; (80045bc <dxl_sendPacket+0xf0>)
 80045a6:	f7fc ff13 	bl	80013d0 <HAL_GPIO_WritePin>

	return 0;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3750      	adds	r7, #80	; 0x50
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045b6:	b002      	add	sp, #8
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40020000 	.word	0x40020000

080045c0 <dxl_updateCRC>:
//==============================================================
uint16_t dxl_updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80045cc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80045d0:	6019      	str	r1, [r3, #0]
 80045d2:	4611      	mov	r1, r2
 80045d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80045d8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80045dc:	4602      	mov	r2, r0
 80045de:	801a      	strh	r2, [r3, #0]
 80045e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80045e4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80045e8:	460a      	mov	r2, r1
 80045ea:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
 80045ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80045f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045f4:	4a29      	ldr	r2, [pc, #164]	; (800469c <dxl_updateCRC+0xdc>)
 80045f6:	4618      	mov	r0, r3
 80045f8:	4611      	mov	r1, r2
 80045fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fe:	461a      	mov	r2, r3
 8004600:	f001 f93a 	bl	8005878 <memcpy>
	                                0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5,
	                                0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
	                                0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
	                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for(j = 0; j < data_blk_size; j++)
 8004604:	2300      	movs	r3, #0
 8004606:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800460a:	e034      	b.n	8004676 <dxl_updateCRC+0xb6>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 800460c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004610:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	b29a      	uxth	r2, r3
 800461a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800461e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8004628:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800462c:	1c58      	adds	r0, r3, #1
 800462e:	6008      	str	r0, [r1, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	4053      	eors	r3, r2
 8004636:	b29b      	uxth	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800463e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004642:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	b21a      	sxth	r2, r3
 800464c:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8004650:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004654:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004658:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800465c:	b21b      	sxth	r3, r3
 800465e:	4053      	eors	r3, r2
 8004660:	b21a      	sxth	r2, r3
 8004662:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004666:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800466a:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800466c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004670:	3301      	adds	r3, #1
 8004672:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8004676:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800467a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800467e:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3c1      	bcc.n	800460c <dxl_updateCRC+0x4c>
	}

	return crc_accum;
 8004688:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800468c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8004690:	881b      	ldrh	r3, [r3, #0]
}
 8004692:	4618      	mov	r0, r3
 8004694:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	080058ac 	.word	0x080058ac

080046a0 <dxl_rcv_cb>:
uint8_t 	size = 0;

uint8_t 	dxl_rcvBuf[BUF_SIZE];
//==================================================================
void dxl_rcv_cb(uint8_t car)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	71fb      	strb	r3, [r7, #7]
		dxl_rcvBuf[(p_wr++)%BUF_SIZE] = car;
 80046aa:	4b10      	ldr	r3, [pc, #64]	; (80046ec <dxl_rcv_cb+0x4c>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	b2d1      	uxtb	r1, r2
 80046b2:	4a0e      	ldr	r2, [pc, #56]	; (80046ec <dxl_rcv_cb+0x4c>)
 80046b4:	7011      	strb	r1, [r2, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <dxl_rcv_cb+0x50>)
 80046ba:	fb83 1302 	smull	r1, r3, r3, r2
 80046be:	1159      	asrs	r1, r3, #5
 80046c0:	17d3      	asrs	r3, r2, #31
 80046c2:	1acb      	subs	r3, r1, r3
 80046c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	4909      	ldr	r1, [pc, #36]	; (80046f4 <dxl_rcv_cb+0x54>)
 80046d0:	79fa      	ldrb	r2, [r7, #7]
 80046d2:	54ca      	strb	r2, [r1, r3]
		size++;
 80046d4:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <dxl_rcv_cb+0x58>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <dxl_rcv_cb+0x58>)
 80046de:	701a      	strb	r2, [r3, #0]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000050 	.word	0x20000050
 80046f0:	10624dd3 	.word	0x10624dd3
 80046f4:	20000130 	.word	0x20000130
 80046f8:	20000052 	.word	0x20000052

080046fc <dxl_readPacket>:
#define STATE_CRC1 			10
#define STATE_CRC2 			11
#define STATE_FINAL 		12
//==================================================================
int dxl_readPacket()
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
	static uint16_t length;
	uint8_t instruction;

	static int i=0;

	state = STATE_START;
 8004702:	4b76      	ldr	r3, [pc, #472]	; (80048dc <dxl_readPacket+0x1e0>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
	i=0;
 8004708:	4b75      	ldr	r3, [pc, #468]	; (80048e0 <dxl_readPacket+0x1e4>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

	while(p_rd != p_wr)
 800470e:	bf00      	nop
 8004710:	e0d0      	b.n	80048b4 <dxl_readPacket+0x1b8>
	{
	tmp = dxl_rcvBuf[(p_rd++)%BUF_SIZE];
 8004712:	4b74      	ldr	r3, [pc, #464]	; (80048e4 <dxl_readPacket+0x1e8>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	b2d1      	uxtb	r1, r2
 800471a:	4a72      	ldr	r2, [pc, #456]	; (80048e4 <dxl_readPacket+0x1e8>)
 800471c:	7011      	strb	r1, [r2, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	4b71      	ldr	r3, [pc, #452]	; (80048e8 <dxl_readPacket+0x1ec>)
 8004722:	fb83 1302 	smull	r1, r3, r3, r2
 8004726:	1159      	asrs	r1, r3, #5
 8004728:	17d3      	asrs	r3, r2, #31
 800472a:	1acb      	subs	r3, r1, r3
 800472c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	4a6d      	ldr	r2, [pc, #436]	; (80048ec <dxl_readPacket+0x1f0>)
 8004738:	5cd3      	ldrb	r3, [r2, r3]
 800473a:	71fb      	strb	r3, [r7, #7]

	switch(state)
 800473c:	4b67      	ldr	r3, [pc, #412]	; (80048dc <dxl_readPacket+0x1e0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b0c      	cmp	r3, #12
 8004742:	f200 80b7 	bhi.w	80048b4 <dxl_readPacket+0x1b8>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <dxl_readPacket+0x50>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004781 	.word	0x08004781
 8004750:	08004791 	.word	0x08004791
 8004754:	080047a1 	.word	0x080047a1
 8004758:	080047b1 	.word	0x080047b1
 800475c:	080048b5 	.word	0x080048b5
 8004760:	080047bf 	.word	0x080047bf
 8004764:	080047d5 	.word	0x080047d5
 8004768:	080047e5 	.word	0x080047e5
 800476c:	0800481b 	.word	0x0800481b
 8004770:	0800483d 	.word	0x0800483d
 8004774:	08004885 	.word	0x08004885
 8004778:	08004897 	.word	0x08004897
 800477c:	080048a9 	.word	0x080048a9
	{
		case	STATE_START	: 		if(tmp == 0xFF) {state = STATE_HEADER_1;} 		break;
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	2bff      	cmp	r3, #255	; 0xff
 8004784:	f040 8096 	bne.w	80048b4 <dxl_readPacket+0x1b8>
 8004788:	4b54      	ldr	r3, [pc, #336]	; (80048dc <dxl_readPacket+0x1e0>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e091      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_HEADER_1 : 	if( tmp == 0xFF) {state = STATE_HEADER_2;} 		break;
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	2bff      	cmp	r3, #255	; 0xff
 8004794:	f040 808e 	bne.w	80048b4 <dxl_readPacket+0x1b8>
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <dxl_readPacket+0x1e0>)
 800479a:	2202      	movs	r2, #2
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e089      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_HEADER_2 : 	if( tmp == 0xFD) {state = STATE_HEADER_3;}		break;
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	2bfd      	cmp	r3, #253	; 0xfd
 80047a4:	f040 8086 	bne.w	80048b4 <dxl_readPacket+0x1b8>
 80047a8:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <dxl_readPacket+0x1e0>)
 80047aa:	2203      	movs	r2, #3
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e081      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_HEADER_3 : 	if( tmp == 0x00) {state = STATE_ID;}			break;
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d17e      	bne.n	80048b4 <dxl_readPacket+0x1b8>
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <dxl_readPacket+0x1e0>)
 80047b8:	2205      	movs	r2, #5
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e07a      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_ID : 			id = tmp ; state = STATE_LENGTH_LB; term_printf("id = %d | ",id); break;
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	717b      	strb	r3, [r7, #5]
 80047c2:	4b46      	ldr	r3, [pc, #280]	; (80048dc <dxl_readPacket+0x1e0>)
 80047c4:	2206      	movs	r2, #6
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	797b      	ldrb	r3, [r7, #5]
 80047ca:	4619      	mov	r1, r3
 80047cc:	4848      	ldr	r0, [pc, #288]	; (80048f0 <dxl_readPacket+0x1f4>)
 80047ce:	f000 fe17 	bl	8005400 <term_printf>
 80047d2:	e06f      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_LENGTH_LB : 	length = tmp ; state = STATE_LENGTH_HB;			break;
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <dxl_readPacket+0x1f8>)
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <dxl_readPacket+0x1e0>)
 80047de:	2207      	movs	r2, #7
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e067      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_LENGTH_HB : 	length = (uint16_t)tmp << 8 | length ;
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	b21a      	sxth	r2, r3
 80047ea:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <dxl_readPacket+0x1f8>)
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b21b      	sxth	r3, r3
 80047f0:	4313      	orrs	r3, r2
 80047f2:	b21b      	sxth	r3, r3
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <dxl_readPacket+0x1f8>)
 80047f8:	801a      	strh	r2, [r3, #0]
									state = STATE_INSTRUCTION;
 80047fa:	4b38      	ldr	r3, [pc, #224]	; (80048dc <dxl_readPacket+0x1e0>)
 80047fc:	2208      	movs	r2, #8
 80047fe:	601a      	str	r2, [r3, #0]
									term_printf("length = %d | ",length);
 8004800:	4b3c      	ldr	r3, [pc, #240]	; (80048f4 <dxl_readPacket+0x1f8>)
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	483c      	ldr	r0, [pc, #240]	; (80048f8 <dxl_readPacket+0x1fc>)
 8004808:	f000 fdfa 	bl	8005400 <term_printf>
									length = length - 2;
 800480c:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <dxl_readPacket+0x1f8>)
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	3b02      	subs	r3, #2
 8004812:	b29a      	uxth	r2, r3
 8004814:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <dxl_readPacket+0x1f8>)
 8004816:	801a      	strh	r2, [r3, #0]
																					break;
 8004818:	e04c      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case	STATE_INSTRUCTION : instruction = tmp ;
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	71bb      	strb	r3, [r7, #6]
									state = STATE_PARAM;
 800481e:	4b2f      	ldr	r3, [pc, #188]	; (80048dc <dxl_readPacket+0x1e0>)
 8004820:	2209      	movs	r2, #9
 8004822:	601a      	str	r2, [r3, #0]
									length--;
 8004824:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <dxl_readPacket+0x1f8>)
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <dxl_readPacket+0x1f8>)
 800482e:	801a      	strh	r2, [r3, #0]
									term_printf("instruction = 0x%x | ",instruction);
 8004830:	79bb      	ldrb	r3, [r7, #6]
 8004832:	4619      	mov	r1, r3
 8004834:	4831      	ldr	r0, [pc, #196]	; (80048fc <dxl_readPacket+0x200>)
 8004836:	f000 fde3 	bl	8005400 <term_printf>
																					break;
 800483a:	e03b      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_PARAM : if( length > 0 ){
 800483c:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <dxl_readPacket+0x1f8>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <dxl_readPacket+0x178>
									param[i++] = tmp ;
 8004844:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <dxl_readPacket+0x1e4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	4925      	ldr	r1, [pc, #148]	; (80048e0 <dxl_readPacket+0x1e4>)
 800484c:	600a      	str	r2, [r1, #0]
 800484e:	492c      	ldr	r1, [pc, #176]	; (8004900 <dxl_readPacket+0x204>)
 8004850:	79fa      	ldrb	r2, [r7, #7]
 8004852:	54ca      	strb	r2, [r1, r3]
									length-- ;
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <dxl_readPacket+0x1f8>)
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <dxl_readPacket+0x1f8>)
 800485e:	801a      	strh	r2, [r3, #0]
									term_printf("param %d = 0x%x | ",i,tmp);
 8004860:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <dxl_readPacket+0x1e4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	79fa      	ldrb	r2, [r7, #7]
 8004866:	4619      	mov	r1, r3
 8004868:	4826      	ldr	r0, [pc, #152]	; (8004904 <dxl_readPacket+0x208>)
 800486a:	f000 fdc9 	bl	8005400 <term_printf>
									state = STATE_PARAM;
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <dxl_readPacket+0x1e0>)
 8004870:	2209      	movs	r2, #9
 8004872:	601a      	str	r2, [r3, #0]
								}
								if (length == 0) {
 8004874:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <dxl_readPacket+0x1f8>)
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11b      	bne.n	80048b4 <dxl_readPacket+0x1b8>
									state = STATE_CRC1;
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <dxl_readPacket+0x1e0>)
 800487e:	220a      	movs	r2, #10
 8004880:	601a      	str	r2, [r3, #0]
								}
																					break;
 8004882:	e017      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case	STATE_CRC1 : state = STATE_CRC2; term_printf("CRC1 = 0x%x | ",tmp);	break;
 8004884:	4b15      	ldr	r3, [pc, #84]	; (80048dc <dxl_readPacket+0x1e0>)
 8004886:	220b      	movs	r2, #11
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	4619      	mov	r1, r3
 800488e:	481e      	ldr	r0, [pc, #120]	; (8004908 <dxl_readPacket+0x20c>)
 8004890:	f000 fdb6 	bl	8005400 <term_printf>
 8004894:	e00e      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case 	STATE_CRC2 : state = STATE_FINAL; term_printf("CRC2 = 0x%x ",tmp);	break;
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <dxl_readPacket+0x1e0>)
 8004898:	220c      	movs	r2, #12
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	4619      	mov	r1, r3
 80048a0:	481a      	ldr	r0, [pc, #104]	; (800490c <dxl_readPacket+0x210>)
 80048a2:	f000 fdad 	bl	8005400 <term_printf>
 80048a6:	e005      	b.n	80048b4 <dxl_readPacket+0x1b8>
		case	STATE_FINAL : p_rd = p_wr; return 0; 								break;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <dxl_readPacket+0x214>)
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <dxl_readPacket+0x1e8>)
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	2300      	movs	r3, #0
 80048b2:	e00e      	b.n	80048d2 <dxl_readPacket+0x1d6>
	while(p_rd != p_wr)
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <dxl_readPacket+0x1e8>)
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <dxl_readPacket+0x214>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	f47f af28 	bne.w	8004712 <dxl_readPacket+0x16>
	}
	}
	term_printf("\n\r ");
 80048c2:	4814      	ldr	r0, [pc, #80]	; (8004914 <dxl_readPacket+0x218>)
 80048c4:	f000 fd9c 	bl	8005400 <term_printf>
	p_rd = p_wr;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <dxl_readPacket+0x214>)
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <dxl_readPacket+0x1e8>)
 80048ce:	701a      	strb	r2, [r3, #0]
	return 0;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000054 	.word	0x20000054
 80048e0:	20000058 	.word	0x20000058
 80048e4:	20000051 	.word	0x20000051
 80048e8:	10624dd3 	.word	0x10624dd3
 80048ec:	20000130 	.word	0x20000130
 80048f0:	08005aac 	.word	0x08005aac
 80048f4:	2000005c 	.word	0x2000005c
 80048f8:	08005ab8 	.word	0x08005ab8
 80048fc:	08005ac8 	.word	0x08005ac8
 8004900:	2000003c 	.word	0x2000003c
 8004904:	08005ae0 	.word	0x08005ae0
 8004908:	08005af4 	.word	0x08005af4
 800490c:	08005b04 	.word	0x08005b04
 8004910:	20000050 	.word	0x20000050
 8004914:	08005b14 	.word	0x08005b14

08004918 <main>:

extern TIM_HandleTypeDef    TimHandle_period;
extern uint8_t rec_buf2[NB_CAR_TO_RECEIVE+1];	 // defined in drv_uart.c

int main(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0

	int val = 5;
 800491e:	2305      	movs	r3, #5
 8004920:	60bb      	str	r3, [r7, #8]

	HAL_Init();	// passage par stm32f4xx_hal_msp.c : configuration des broches
 8004922:	f7fc f9f9 	bl	8000d18 <HAL_Init>
	SystemClock_Config();
 8004926:	f7ff fcb7 	bl	8004298 <SystemClock_Config>

    uart1_Init();			// ZIGBEE
 800492a:	f000 fc67 	bl	80051fc <uart1_Init>
    uart2_Init();           // CABLE
 800492e:	f000 fc91 	bl	8005254 <uart2_Init>
    uart6_Init();           // DYNAMIXEL
 8004932:	f000 fcbb 	bl	80052ac <uart6_Init>
	//tickTimer_Init(3000);	// 3000 ms
	//i2c1_Init();			// Modifier stm32f4xx_hal_msp.c pour configurer les broches
	//spi1Init();			// Modifier stm32f4xx_hal_msp.c pour configurer les broches
	   HAL_Delay(500);
 8004936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800493a:	f7fc fa5f 	bl	8000dfc <HAL_Delay>

	    //------------------------------------------------------------
	    //  TEST LIAISON SERIE
	    // ouvrir gtkterm ou minicom / /dev/ttyCAM0 baudrate : 115200-8-N-1
	    //------------------------------------------------------------
	    term_printf("hello world \n\r");
 800493e:	4834      	ldr	r0, [pc, #208]	; (8004a10 <main+0xf8>)
 8004940:	f000 fd5e 	bl	8005400 <term_printf>

	    dxl_LED(DYN_ID, LED_ON);
 8004944:	2101      	movs	r1, #1
 8004946:	2001      	movs	r0, #1
 8004948:	f7ff fd2e 	bl	80043a8 <dxl_LED>
	    HAL_Delay(500);
 800494c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004950:	f7fc fa54 	bl	8000dfc <HAL_Delay>
	    dxl_LED(DYN_ID, LED_OFF);
 8004954:	2100      	movs	r1, #0
 8004956:	2001      	movs	r0, #1
 8004958:	f7ff fd26 	bl	80043a8 <dxl_LED>
	    HAL_Delay(500);
 800495c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004960:	f7fc fa4c 	bl	8000dfc <HAL_Delay>
	    dxl_LED(DYN_ID, LED_ON );
 8004964:	2101      	movs	r1, #1
 8004966:	2001      	movs	r0, #1
 8004968:	f7ff fd1e 	bl	80043a8 <dxl_LED>
	    HAL_Delay(500);
 800496c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004970:	f7fc fa44 	bl	8000dfc <HAL_Delay>
	    dxl_LED(DYN_ID, LED_OFF);
 8004974:	2100      	movs	r1, #0
 8004976:	2001      	movs	r0, #1
 8004978:	f7ff fd16 	bl	80043a8 <dxl_LED>
	    HAL_Delay(500);
 800497c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004980:	f7fc fa3c 	bl	8000dfc <HAL_Delay>
	  /*  uint32_t position = dxl_getPresentPosition(DYN_ID);
	    uint32_t baudrate = dxl_getBaudRate(DYN_ID);
	    uint8_t firmware_version = dxl_getFirmwareVersion(DYN_ID);
	    uint8_t model_number = dxl_getModelNumber(DYN_ID);
	*/
	    dxl_setOperatingMode(DYN_ID, 3);
 8004984:	2103      	movs	r1, #3
 8004986:	2001      	movs	r0, #1
 8004988:	f7ff fd3c 	bl	8004404 <dxl_setOperatingMode>
	    dxl_torque(DYN_ID, TORQUE_ON);
 800498c:	2101      	movs	r1, #1
 800498e:	2001      	movs	r0, #1
 8004990:	f7ff fd21 	bl	80043d6 <dxl_torque>
	    dxl_setGoalPosition(DYN_ID,1000);
 8004994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004998:	2001      	movs	r0, #1
 800499a:	f7ff fd70 	bl	800447e <dxl_setGoalPosition>
	    HAL_Delay(2000);
 800499e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80049a2:	f7fc fa2b 	bl	8000dfc <HAL_Delay>
	    dxl_setGoalPosition(DYN_ID,0);
 80049a6:	2100      	movs	r1, #0
 80049a8:	2001      	movs	r0, #1
 80049aa:	f7ff fd68 	bl	800447e <dxl_setGoalPosition>
	    HAL_Delay(2000);
 80049ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80049b2:	f7fc fa23 	bl	8000dfc <HAL_Delay>
	    dxl_torque(DYN_ID, TORQUE_OFF);
 80049b6:	2100      	movs	r1, #0
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7ff fd0c 	bl	80043d6 <dxl_torque>

	    dxl_setOperatingMode(DYN_ID, VELOCITY_MODE);
 80049be:	2101      	movs	r1, #1
 80049c0:	2001      	movs	r0, #1
 80049c2:	f7ff fd1f 	bl	8004404 <dxl_setOperatingMode>
	    dxl_torque(DYN_ID, TORQUE_ON);
 80049c6:	2101      	movs	r1, #1
 80049c8:	2001      	movs	r0, #1
 80049ca:	f7ff fd04 	bl	80043d6 <dxl_torque>
	    dxl_setGoalVelocity(DYN_ID, 140);
 80049ce:	218c      	movs	r1, #140	; 0x8c
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7ff fd2e 	bl	8004432 <dxl_setGoalVelocity>

	    //------------------------------------------------------------
	    //  BLINK LED : PA5
	    //------------------------------------------------------------

	    uint32_t velocity = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]
	    int i=5;
 80049da:	2305      	movs	r3, #5
 80049dc:	60fb      	str	r3, [r7, #12]

	    while(1)
	    {
	    	if(i > 0)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dd09      	ble.n	80049f8 <main+0xe0>
	    	{
	    	velocity = dxl_getPresentVelocity(DYN_ID);
 80049e4:	2001      	movs	r0, #1
 80049e6:	f7ff fcaf 	bl	8004348 <dxl_getPresentVelocity>
 80049ea:	4603      	mov	r3, r0
 80049ec:	607b      	str	r3, [r7, #4]
	    	term_printf("vel = %d \n\r", velocity );
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4808      	ldr	r0, [pc, #32]	; (8004a14 <main+0xfc>)
 80049f2:	f000 fd05 	bl	8005400 <term_printf>
 80049f6:	e003      	b.n	8004a00 <main+0xe8>
	    	}
	    	else
	    	{
	    	dxl_torque(DYN_ID, TORQUE_OFF);
 80049f8:	2100      	movs	r1, #0
 80049fa:	2001      	movs	r0, #1
 80049fc:	f7ff fceb 	bl	80043d6 <dxl_torque>
	    	}
	        HAL_Delay(1000); // 1000 ms
 8004a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a04:	f7fc f9fa 	bl	8000dfc <HAL_Delay>
	        i--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
	    	if(i > 0)
 8004a0e:	e7e6      	b.n	80049de <main+0xc6>
 8004a10:	08005b18 	.word	0x08005b18
 8004a14:	08005b28 	.word	0x08005b28

08004a18 <HAL_GPIO_EXTI_Callback>:

//=====================================================================================
//		GPIO EXTERNAL INTERRUPT CALLBACK
//=====================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d007      	beq.n	8004a38 <HAL_GPIO_EXTI_Callback+0x20>
 8004a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2c:	d000      	beq.n	8004a30 <HAL_GPIO_EXTI_Callback+0x18>
	{
	case GPIO_PIN_0 :
					break;
	case GPIO_PIN_13 :	term_printf("USER BUTTON PUSHED \n\r");	// USER BUTTON
					break;
	default : 		break;
 8004a2e:	e004      	b.n	8004a3a <HAL_GPIO_EXTI_Callback+0x22>
	case GPIO_PIN_13 :	term_printf("USER BUTTON PUSHED \n\r");	// USER BUTTON
 8004a30:	4804      	ldr	r0, [pc, #16]	; (8004a44 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004a32:	f000 fce5 	bl	8005400 <term_printf>
					break;
 8004a36:	e000      	b.n	8004a3a <HAL_GPIO_EXTI_Callback+0x22>
					break;
 8004a38:	bf00      	nop

	}
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	08005b34 	.word	0x08005b34

08004a48 <HAL_TIM_PeriodElapsedCallback>:
//=====================================================================================
//		TIMER INTERRUPT CALLBACK
//=====================================================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	if (htim==&TimHandle_period)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d102      	bne.n	8004a5e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		term_printf("Tick Timer period elapsed \n\r");
 8004a58:	4804      	ldr	r0, [pc, #16]	; (8004a6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004a5a:	f000 fcd1 	bl	8005400 <term_printf>
	}
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000328 	.word	0x20000328
 8004a6c:	08005b4c 	.word	0x08005b4c

08004a70 <HAL_MspInit>:
#define I2C1_ER_IRQ_PRIO	2
#define I2C1_EV_IRQ_PRIO	11
#define TIM5_IRQ_PRIO		12

void HAL_MspInit(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0

	  __GPIOA_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_MspInit+0x78>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <HAL_MspInit+0x78>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_MspInit+0x78>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
	  __GPIOB_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <HAL_MspInit+0x78>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_MspInit+0x78>)
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_MspInit+0x78>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
	  __GPIOC_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_MspInit+0x78>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <HAL_MspInit+0x78>)
 8004ab8:	f043 0304 	orr.w	r3, r3, #4
 8004abc:	6313      	str	r3, [r2, #48]	; 0x30
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_MspInit+0x78>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]

	  HAL_UARTCOM_MspInit();   // UART2
 8004aca:	f000 f827 	bl	8004b1c <HAL_UARTCOM_MspInit>
	  HAL_UARTDYN_MspInit();   // UART6
 8004ace:	f000 f8b7 	bl	8004c40 <HAL_UARTDYN_MspInit>
	  HAL_UART1_MspInit();     // UART1
 8004ad2:	f000 f863 	bl	8004b9c <HAL_UART1_MspInit>

	  HAL_tickTimer_MspInit();
 8004ad6:	f000 f8e3 	bl	8004ca0 <HAL_tickTimer_MspInit>
	//  HAL_GPIO_LED_MspInit();
	//  HAL_GPIO_BUTTON_MspInit();
	//  HAL_i2c_MspInit();
	//  HAL_spi_MspInit();
	//  HAL_adcir_MspInit();
	  HAL_GPIO_DYN_wrEn_MspInit();
 8004ada:	f000 f807 	bl	8004aec <HAL_GPIO_DYN_wrEn_MspInit>
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800

08004aec <HAL_GPIO_DYN_wrEn_MspInit>:

/*****************************************************************/

void HAL_GPIO_DYN_wrEn_MspInit(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

/* Configure PA05 IO in output push-pull mode to drive external LED */
	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af8:	2301      	movs	r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004afc:	2301      	movs	r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004b00:	2302      	movs	r3, #2
 8004b02:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b04:	1d3b      	adds	r3, r7, #4
 8004b06:	4619      	mov	r1, r3
 8004b08:	4803      	ldr	r0, [pc, #12]	; (8004b18 <HAL_GPIO_DYN_wrEn_MspInit+0x2c>)
 8004b0a:	f7fc fadd 	bl	80010c8 <HAL_GPIO_Init>
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40020000 	.word	0x40020000

08004b1c <HAL_UARTCOM_MspInit>:
			USART2 : ST-LINK virtual Port
 TX --> PA2
 RX --> PA3
*******************************************************************/
void HAL_UARTCOM_MspInit(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_UARTCOM_MspInit+0x78>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <HAL_UARTCOM_MspInit+0x78>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <HAL_UARTCOM_MspInit+0x78>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]

  __USART2_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <HAL_UARTCOM_MspInit+0x78>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <HAL_UARTCOM_MspInit+0x78>)
 8004b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <HAL_UARTCOM_MspInit+0x78>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin       = GPIO_PIN_2 | GPIO_PIN_3;
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004b62:	2301      	movs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART2;
 8004b6a:	2307      	movs	r3, #7
 8004b6c:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4619      	mov	r1, r3
 8004b74:	4808      	ldr	r0, [pc, #32]	; (8004b98 <HAL_UARTCOM_MspInit+0x7c>)
 8004b76:	f7fc faa7 	bl	80010c8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART2_IRQn, USART2_IRQ_PRIO, 0);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2109      	movs	r1, #9
 8004b7e:	2026      	movs	r0, #38	; 0x26
 8004b80:	f7fc fa3b 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b84:	2026      	movs	r0, #38	; 0x26
 8004b86:	f7fc fa54 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8004b8a:	bf00      	nop
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40020000 	.word	0x40020000

08004b9c <HAL_UART1_MspInit>:

  PA9     ------> USART1_TX
  PB3     ------> USART1_RX
******************************************************************/
void HAL_UART1_MspInit(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_UART1_MspInit+0x98>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <HAL_UART1_MspInit+0x98>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_UART1_MspInit+0x98>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]

  __USART1_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <HAL_UART1_MspInit+0x98>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <HAL_UART1_MspInit+0x98>)
 8004bc8:	f043 0310 	orr.w	r3, r3, #16
 8004bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bce:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_UART1_MspInit+0x98>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8004bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004be0:	2302      	movs	r3, #2
 8004be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004be4:	2301      	movs	r3, #1
 8004be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART1;
 8004bec:	2307      	movs	r3, #7
 8004bee:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4810      	ldr	r0, [pc, #64]	; (8004c38 <HAL_UART1_MspInit+0x9c>)
 8004bf8:	f7fc fa66 	bl	80010c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004c00:	2302      	movs	r3, #2
 8004c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART1;
 8004c0c:	2307      	movs	r3, #7
 8004c0e:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c10:	f107 030c 	add.w	r3, r7, #12
 8004c14:	4619      	mov	r1, r3
 8004c16:	4809      	ldr	r0, [pc, #36]	; (8004c3c <HAL_UART1_MspInit+0xa0>)
 8004c18:	f7fc fa56 	bl	80010c8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART1_IRQn, USART1_IRQ_PRIO, 0);
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2108      	movs	r1, #8
 8004c20:	2025      	movs	r0, #37	; 0x25
 8004c22:	f7fc f9ea 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c26:	2025      	movs	r0, #37	; 0x25
 8004c28:	f7fc fa03 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8004c2c:	bf00      	nop
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40020000 	.word	0x40020000
 8004c3c:	40020400 	.word	0x40020400

08004c40 <HAL_UARTDYN_MspInit>:

  PC6     ------> USART6_TX
  PC7     ------> USART6_RX
******************************************************************/
void HAL_UARTDYN_MspInit(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

    __USART6_CLK_ENABLE();
 8004c46:	2300      	movs	r3, #0
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_UARTDYN_MspInit+0x58>)
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <HAL_UARTDYN_MspInit+0x58>)
 8004c50:	f043 0320 	orr.w	r3, r3, #32
 8004c54:	6453      	str	r3, [r2, #68]	; 0x44
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_UARTDYN_MspInit+0x58>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c62:	23c0      	movs	r3, #192	; 0xc0
 8004c64:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c66:	2302      	movs	r3, #2
 8004c68:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c72:	2308      	movs	r3, #8
 8004c74:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4808      	ldr	r0, [pc, #32]	; (8004c9c <HAL_UARTDYN_MspInit+0x5c>)
 8004c7c:	f7fc fa24 	bl	80010c8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(USART6_IRQn, USART6_IRQ_PRIO, 0);
 8004c80:	2200      	movs	r2, #0
 8004c82:	210a      	movs	r1, #10
 8004c84:	2047      	movs	r0, #71	; 0x47
 8004c86:	f7fc f9b8 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004c8a:	2047      	movs	r0, #71	; 0x47
 8004c8c:	f7fc f9d1 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8004c90:	bf00      	nop
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	40020800 	.word	0x40020800

08004ca0 <HAL_tickTimer_MspInit>:

/******************************************************************
			TIMER 5 TickTimer
******************************************************************/
void HAL_tickTimer_MspInit(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0

	__TIM5_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <HAL_tickTimer_MspInit+0x3c>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	4a0b      	ldr	r2, [pc, #44]	; (8004cdc <HAL_tickTimer_MspInit+0x3c>)
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_tickTimer_MspInit+0x3c>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]

 	 HAL_NVIC_SetPriority(TIM5_IRQn, TIM5_IRQ_PRIO, 0);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	210c      	movs	r1, #12
 8004cc6:	2032      	movs	r0, #50	; 0x32
 8004cc8:	f7fc f997 	bl	8000ffa <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ccc:	2032      	movs	r0, #50	; 0x32
 8004cce:	f7fc f9b0 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800

08004ce0 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HardFault_Handler>:

void HardFault_Handler(void)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004cf2:	e7fe      	b.n	8004cf2 <HardFault_Handler+0x4>

08004cf4 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004cf8:	e7fe      	b.n	8004cf8 <MemManage_Handler+0x4>

08004cfa <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004cfe:	e7fe      	b.n	8004cfe <BusFault_Handler+0x4>

08004d00 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004d04:	e7fe      	b.n	8004d04 <UsageFault_Handler+0x4>

08004d06 <DebugMon_Handler>:
void SVC_Handler(void)
{}
*/

void DebugMon_Handler(void)
{
 8004d06:	b480      	push	{r7}
 8004d08:	af00      	add	r7, sp, #0
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <SysTick_Handler>:
void PendSV_Handler(void)
{}
*/

void SysTick_Handler(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
	/*if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
	    {
	      xPortSysTickHandler();
	    }*/
  HAL_IncTick();
 8004d18:	f7fc f850 	bl	8000dbc <HAL_IncTick>
}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <OTG_FS_IRQHandler>:


void OTG_FS_IRQHandler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
   //HAL_PCD_IRQHandler(&hpcd); // USB
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <TIM5_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f4xx.s).                                               */
/******************************************************************************/

void TIM5_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle_period);
 8004d34:	4802      	ldr	r0, [pc, #8]	; (8004d40 <TIM5_IRQHandler+0x10>)
 8004d36:	f7fe fba1 	bl	800347c <HAL_TIM_IRQHandler>
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000328 	.word	0x20000328

08004d44 <EXTI0_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI0_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004d48:	2001      	movs	r0, #1
 8004d4a:	f7fc fb5b 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <EXTI1_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI1_IRQHandler(void)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004d56:	2002      	movs	r0, #2
 8004d58:	f7fc fb54 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
}
 8004d5c:	bf00      	nop
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004d64:	4802      	ldr	r0, [pc, #8]	; (8004d70 <I2C1_EV_IRQHandler+0x10>)
 8004d66:	f7fc fb65 	bl	8001434 <HAL_I2C_EV_IRQHandler>
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000368 	.word	0x20000368

08004d74 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004d78:	4802      	ldr	r0, [pc, #8]	; (8004d84 <I2C1_ER_IRQHandler+0x10>)
 8004d7a:	f7fc fcc1 	bl	8001700 <HAL_I2C_ER_IRQHandler>
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000368 	.word	0x20000368

08004d88 <EXTI15_10_IRQHandler>:

//=======================================================
// USER BUTTON INTERRUPT (PC13)
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004d8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d90:	f7fc fb38 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
}
 8004d94:	bf00      	nop
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <USART2_IRQHandler>:
//=======================================================
// STLINK USART RECEIVE HANDLER
//=======================================================
void USART2_IRQHandler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart2Handle);
 8004d9c:	4802      	ldr	r0, [pc, #8]	; (8004da8 <USART2_IRQHandler+0x10>)
 8004d9e:	f7fe fdf7 	bl	8003990 <HAL_UART_IRQHandler>
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200000b0 	.word	0x200000b0

08004dac <USART6_IRQHandler>:
//=======================================================
// ZIGBEE USART RECEIVE HANDLER
//=======================================================
void USART6_IRQHandler(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart6Handle);
 8004db0:	4802      	ldr	r0, [pc, #8]	; (8004dbc <USART6_IRQHandler+0x10>)
 8004db2:	f7fe fded 	bl	8003990 <HAL_UART_IRQHandler>
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000070 	.word	0x20000070

08004dc0 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart1Handle);
 8004dc4:	4802      	ldr	r0, [pc, #8]	; (8004dd0 <USART1_IRQHandler+0x10>)
 8004dc6:	f7fe fde3 	bl	8003990 <HAL_UART_IRQHandler>
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200000f0 	.word	0x200000f0

08004dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dd8:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <SystemInit+0x60>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <SystemInit+0x60>)
 8004de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <SystemInit+0x64>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <SystemInit+0x64>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004df4:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <SystemInit+0x64>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <SystemInit+0x64>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <SystemInit+0x64>)
 8004e00:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <SystemInit+0x64>)
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <SystemInit+0x68>)
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <SystemInit+0x64>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <SystemInit+0x64>)
 8004e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <SystemInit+0x64>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <SystemInit+0x60>)
 8004e24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e28:	609a      	str	r2, [r3, #8]
#endif
}
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000ed00 	.word	0xe000ed00
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	24003010 	.word	0x24003010

08004e40 <num2str>:
 */
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b089      	sub	sp, #36	; 0x24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	fb01 f202 	mul.w	r2, r1, r2
 8004e60:	1a9a      	subs	r2, r3, r2
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	60f9      	str	r1, [r7, #12]
 8004e68:	4936      	ldr	r1, [pc, #216]	; (8004f44 <num2str+0x104>)
 8004e6a:	5c8a      	ldrb	r2, [r1, r2]
 8004e6c:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e9      	bne.n	8004e52 <num2str+0x12>
        *s='\0';
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	e01a      	b.n	8004ec8 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	4413      	add	r3, r2
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	6979      	ldr	r1, [r7, #20]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	440b      	add	r3, r1
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	7efa      	ldrb	r2, [r7, #27]
 8004ec0:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3df      	bcc.n	8004e92 <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d22d      	bcs.n	8004f36 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e00e      	b.n	8004efe <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	69f9      	ldr	r1, [r7, #28]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4419      	add	r1, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1acb      	subs	r3, r1, r3
 8004ef0:	6979      	ldr	r1, [r7, #20]
 8004ef2:	440b      	add	r3, r1
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ed      	beq.n	8004ee0 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <num2str+0xd0>
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	76fb      	strb	r3, [r7, #27]
 8004f0e:	e001      	b.n	8004f14 <num2str+0xd4>
 8004f10:	2330      	movs	r3, #48	; 0x30
 8004f12:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	e007      	b.n	8004f2a <num2str+0xea>
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	7efa      	ldrb	r2, [r7, #27]
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	3301      	adds	r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d3f1      	bcc.n	8004f1a <num2str+0xda>
        }
}
 8004f36:	bf00      	nop
 8004f38:	3724      	adds	r7, #36	; 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c

08004f48 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004f60:	e02e      	b.n	8004fc0 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b2f      	cmp	r3, #47	; 0x2f
 8004f66:	d906      	bls.n	8004f76 <str2num+0x2e>
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b39      	cmp	r3, #57	; 0x39
 8004f6c:	d803      	bhi.n	8004f76 <str2num+0x2e>
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	3b30      	subs	r3, #48	; 0x30
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	e018      	b.n	8004fa8 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d109      	bne.n	8004f90 <str2num+0x48>
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d906      	bls.n	8004f90 <str2num+0x48>
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	2b46      	cmp	r3, #70	; 0x46
 8004f86:	d803      	bhi.n	8004f90 <str2num+0x48>
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	3b37      	subs	r3, #55	; 0x37
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e00b      	b.n	8004fa8 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d117      	bne.n	8004fc6 <str2num+0x7e>
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b60      	cmp	r3, #96	; 0x60
 8004f9a:	d914      	bls.n	8004fc6 <str2num+0x7e>
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b66      	cmp	r3, #102	; 0x66
 8004fa0:	d811      	bhi.n	8004fc6 <str2num+0x7e>
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	3b57      	subs	r3, #87	; 0x57
 8004fa6:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1cd      	bne.n	8004f62 <str2num+0x1a>
	}
	return u;
 8004fc6:	697b      	ldr	r3, [r7, #20]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004fe8:	e018      	b.n	800501c <reverse+0x48>
    {
        temp = str[i];
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	4413      	add	r3, r2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	441a      	add	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	440b      	add	r3, r1
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4413      	add	r3, r2
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3301      	adds	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3b01      	subs	r3, #1
 800501a:	613b      	str	r3, [r7, #16]
    while (i<j)
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	429a      	cmp	r2, r3
 8005022:	dbe2      	blt.n	8004fea <reverse+0x16>
    }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
    while (x)
 8005044:	e01d      	b.n	8005082 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <intToStr+0x8c>)
 800504a:	fb83 1302 	smull	r1, r3, r3, r2
 800504e:	1099      	asrs	r1, r3, #2
 8005050:	17d3      	asrs	r3, r2, #31
 8005052:	1ac9      	subs	r1, r1, r3
 8005054:	460b      	mov	r3, r1
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	1ad1      	subs	r1, r2, r3
 800505e:	b2ca      	uxtb	r2, r1
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1c59      	adds	r1, r3, #1
 8005064:	6179      	str	r1, [r7, #20]
 8005066:	4619      	mov	r1, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	440b      	add	r3, r1
 800506c:	3230      	adds	r2, #48	; 0x30
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a12      	ldr	r2, [pc, #72]	; (80050c0 <intToStr+0x8c>)
 8005076:	fb82 1203 	smull	r1, r2, r2, r3
 800507a:	1092      	asrs	r2, r2, #2
 800507c:	17db      	asrs	r3, r3, #31
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	60fb      	str	r3, [r7, #12]
    while (x)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1de      	bne.n	8005046 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8005088:	e007      	b.n	800509a <intToStr+0x66>
        str[i++] = '0';
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	617a      	str	r2, [r7, #20]
 8005090:	461a      	mov	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4413      	add	r3, r2
 8005096:	2230      	movs	r2, #48	; 0x30
 8005098:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	dbf3      	blt.n	800508a <intToStr+0x56>

    reverse(str, i);
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	68b8      	ldr	r0, [r7, #8]
 80050a6:	f7ff ff95 	bl	8004fd4 <reverse>
    str[i] = '\0';
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	4413      	add	r3, r2
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
    return i;
 80050b4:	697b      	ldr	r3, [r7, #20]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	66666667 	.word	0x66666667
 80050c4:	00000000 	.word	0x00000000

080050c8 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80050d4:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80050d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80050da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050de:	ee17 3a90 	vmov	r3, s15
 80050e2:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80050f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f6:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80050fa:	2200      	movs	r2, #0
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	69f8      	ldr	r0, [r7, #28]
 8005100:	f7ff ff98 	bl	8005034 <intToStr>
 8005104:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d025      	beq.n	8005158 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	222e      	movs	r2, #46	; 0x2e
 8005114:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8005160 <float2str+0x98>
 800511c:	f000 f824 	bl	8005168 <myPow>
 8005120:	ec53 2b10 	vmov	r2, r3, d0
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	f7fb fc24 	bl	8000974 <__aeabi_d2f>
 800512c:	ee07 0a10 	vmov	s14, r0
 8005130:	edd7 7a06 	vldr	s15, [r7, #24]
 8005134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005138:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800513c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3301      	adds	r3, #1
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4619      	mov	r1, r3
 8005150:	ee17 0a90 	vmov	r0, s15
 8005154:	f7ff ff6e 	bl	8005034 <intToStr>
    }
}
 8005158:	bf00      	nop
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	00000000 	.word	0x00000000
 8005164:	40240000 	.word	0x40240000

08005168 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	ed87 0b02 	vstr	d0, [r7, #8]
 8005172:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfb8      	it	lt
 800517a:	425b      	neglt	r3, r3
 800517c:	61fb      	str	r3, [r7, #28]
    double result = 1;
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <myPow+0x90>)
 8005184:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8005188:	e01b      	b.n	80051c2 <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <myPow+0x40>
        {
            result = result * x;
 8005194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005198:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800519c:	f7fb f9d8 	bl	8000550 <__aeabi_dmul>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
        x = x * x;
 80051ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051b6:	f7fb f9cb 	bl	8000550 <__aeabi_dmul>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e0      	bne.n	800518a <myPow+0x22>
    }

    if(n < 0)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da09      	bge.n	80051e2 <myPow+0x7a>
    {
        return 1/result;
 80051ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	4908      	ldr	r1, [pc, #32]	; (80051f8 <myPow+0x90>)
 80051d8:	f7fb fae4 	bl	80007a4 <__aeabi_ddiv>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	e001      	b.n	80051e6 <myPow+0x7e>
    }
    return result;
 80051e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80051e6:	ec43 2b17 	vmov	d7, r2, r3
 80051ea:	eeb0 0a47 	vmov.f32	s0, s14
 80051ee:	eef0 0a67 	vmov.f32	s1, s15
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	3ff00000 	.word	0x3ff00000

080051fc <uart1_Init>:
//=================================================================
//	UART 2 INIT (STLINK UART)
//=================================================================

void uart1_Init()
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
	  Uart1Handle.Instance          = USART1;
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <uart1_Init+0x4c>)
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <uart1_Init+0x50>)
 8005204:	601a      	str	r2, [r3, #0]

	  Uart1Handle.Init.BaudRate     = 115200;
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <uart1_Init+0x4c>)
 8005208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800520c:	605a      	str	r2, [r3, #4]
	  Uart1Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <uart1_Init+0x4c>)
 8005210:	2200      	movs	r2, #0
 8005212:	609a      	str	r2, [r3, #8]
	  Uart1Handle.Init.StopBits     = UART_STOPBITS_1;
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <uart1_Init+0x4c>)
 8005216:	2200      	movs	r2, #0
 8005218:	60da      	str	r2, [r3, #12]
	  Uart1Handle.Init.Parity       = UART_PARITY_NONE;
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <uart1_Init+0x4c>)
 800521c:	2200      	movs	r2, #0
 800521e:	611a      	str	r2, [r3, #16]
	  Uart1Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <uart1_Init+0x4c>)
 8005222:	2200      	movs	r2, #0
 8005224:	619a      	str	r2, [r3, #24]
	  Uart1Handle.Init.Mode         = UART_MODE_TX_RX;
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <uart1_Init+0x4c>)
 8005228:	220c      	movs	r2, #12
 800522a:	615a      	str	r2, [r3, #20]
	  Uart1Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <uart1_Init+0x4c>)
 800522e:	2200      	movs	r2, #0
 8005230:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart1Handle);
 8005232:	4805      	ldr	r0, [pc, #20]	; (8005248 <uart1_Init+0x4c>)
 8005234:	f7fe fa66 	bl	8003704 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, NB_CAR_TO_RECEIVE);
 8005238:	2201      	movs	r2, #1
 800523a:	4905      	ldr	r1, [pc, #20]	; (8005250 <uart1_Init+0x54>)
 800523c:	4802      	ldr	r0, [pc, #8]	; (8005248 <uart1_Init+0x4c>)
 800523e:	f7fe fb51 	bl	80038e4 <HAL_UART_Receive_IT>
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200000f0 	.word	0x200000f0
 800524c:	40011000 	.word	0x40011000
 8005250:	20000060 	.word	0x20000060

08005254 <uart2_Init>:

void uart2_Init()
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
	  Uart2Handle.Instance          = USART2;
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <uart2_Init+0x4c>)
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <uart2_Init+0x50>)
 800525c:	601a      	str	r2, [r3, #0]

	  Uart2Handle.Init.BaudRate     = USART2_BAUDRATE;
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <uart2_Init+0x4c>)
 8005260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005264:	605a      	str	r2, [r3, #4]
	  Uart2Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <uart2_Init+0x4c>)
 8005268:	2200      	movs	r2, #0
 800526a:	609a      	str	r2, [r3, #8]
	  Uart2Handle.Init.StopBits     = UART_STOPBITS_1;
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <uart2_Init+0x4c>)
 800526e:	2200      	movs	r2, #0
 8005270:	60da      	str	r2, [r3, #12]
	  Uart2Handle.Init.Parity       = UART_PARITY_NONE;
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <uart2_Init+0x4c>)
 8005274:	2200      	movs	r2, #0
 8005276:	611a      	str	r2, [r3, #16]
	  Uart2Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <uart2_Init+0x4c>)
 800527a:	2200      	movs	r2, #0
 800527c:	619a      	str	r2, [r3, #24]
	  Uart2Handle.Init.Mode         = UART_MODE_TX_RX;
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <uart2_Init+0x4c>)
 8005280:	220c      	movs	r2, #12
 8005282:	615a      	str	r2, [r3, #20]
	  Uart2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <uart2_Init+0x4c>)
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart2Handle);
 800528a:	4805      	ldr	r0, [pc, #20]	; (80052a0 <uart2_Init+0x4c>)
 800528c:	f7fe fa3a 	bl	8003704 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf2, NB_CAR_TO_RECEIVE);
 8005290:	2201      	movs	r2, #1
 8005292:	4905      	ldr	r1, [pc, #20]	; (80052a8 <uart2_Init+0x54>)
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <uart2_Init+0x4c>)
 8005296:	f7fe fb25 	bl	80038e4 <HAL_UART_Receive_IT>
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	200000b0 	.word	0x200000b0
 80052a4:	40004400 	.word	0x40004400
 80052a8:	20000064 	.word	0x20000064

080052ac <uart6_Init>:
//=================================================================
//	UART 6 INIT (ZIGBEE UART)
//=================================================================

void uart6_Init()
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	  Uart6Handle.Instance          = USART6;
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <uart6_Init+0x4c>)
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <uart6_Init+0x50>)
 80052b4:	601a      	str	r2, [r3, #0]

	  Uart6Handle.Init.BaudRate     =57600;//1000000;//57600;
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <uart6_Init+0x4c>)
 80052b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80052bc:	605a      	str	r2, [r3, #4]
	  Uart6Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 80052be:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <uart6_Init+0x4c>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
	  Uart6Handle.Init.StopBits     = UART_STOPBITS_1;
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <uart6_Init+0x4c>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	60da      	str	r2, [r3, #12]
	  Uart6Handle.Init.Parity       = UART_PARITY_NONE;
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <uart6_Init+0x4c>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	611a      	str	r2, [r3, #16]
	  Uart6Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <uart6_Init+0x4c>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	619a      	str	r2, [r3, #24]
	  Uart6Handle.Init.Mode         = UART_MODE_TX_RX;
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <uart6_Init+0x4c>)
 80052d8:	220c      	movs	r2, #12
 80052da:	615a      	str	r2, [r3, #20]
	  Uart6Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <uart6_Init+0x4c>)
 80052de:	2200      	movs	r2, #0
 80052e0:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart6Handle);
 80052e2:	4805      	ldr	r0, [pc, #20]	; (80052f8 <uart6_Init+0x4c>)
 80052e4:	f7fe fa0e 	bl	8003704 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf6, NB_CAR_TO_RECEIVE);
 80052e8:	2201      	movs	r2, #1
 80052ea:	4905      	ldr	r1, [pc, #20]	; (8005300 <uart6_Init+0x54>)
 80052ec:	4802      	ldr	r0, [pc, #8]	; (80052f8 <uart6_Init+0x4c>)
 80052ee:	f7fe faf9 	bl	80038e4 <HAL_UART_Receive_IT>
}
 80052f2:	bf00      	nop
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000070 	.word	0x20000070
 80052fc:	40011400 	.word	0x40011400
 8005300:	20000068 	.word	0x20000068

08005304 <put_char>:

//=================================================================
//	PUCHAR PROTOTYPE (USED BY PRINTF FUNCTIONS)
//=================================================================
int put_char(char ch)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	71fb      	strb	r3, [r7, #7]
#if USE_USART_STLINK
	HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
 800530e:	1df9      	adds	r1, r7, #7
 8005310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005314:	2201      	movs	r2, #1
 8005316:	4804      	ldr	r0, [pc, #16]	; (8005328 <put_char+0x24>)
 8005318:	f7fe fa4b 	bl	80037b2 <HAL_UART_Transmit>
#else
	HAL_UART_Transmit(&Uart6Handle, (uint8_t *)&ch, 1, 0xFFFF);
#endif
  return 0;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	200000b0 	.word	0x200000b0

0800532c <HAL_UART_RxCpltCallback>:

//=================================================================
//	UART RECEIVE CALLBACK5
//=================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	if (UartHandle -> Instance == USART6)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <HAL_UART_RxCpltCallback+0x5c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10a      	bne.n	8005354 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf6, NB_CAR_TO_RECEIVE);
 800533e:	2201      	movs	r2, #1
 8005340:	4912      	ldr	r1, [pc, #72]	; (800538c <HAL_UART_RxCpltCallback+0x60>)
 8005342:	4813      	ldr	r0, [pc, #76]	; (8005390 <HAL_UART_RxCpltCallback+0x64>)
 8005344:	f7fe face 	bl	80038e4 <HAL_UART_Receive_IT>
		dxl_rcv_cb(rec_buf6[0]);
 8005348:	4b10      	ldr	r3, [pc, #64]	; (800538c <HAL_UART_RxCpltCallback+0x60>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff f9a7 	bl	80046a0 <dxl_rcv_cb>
	else
	if (UartHandle -> Instance == USART1)
	{
		HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, NB_CAR_TO_RECEIVE);
	}
}
 8005352:	e014      	b.n	800537e <HAL_UART_RxCpltCallback+0x52>
	if (UartHandle -> Instance == USART2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <HAL_UART_RxCpltCallback+0x68>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d105      	bne.n	800536a <HAL_UART_RxCpltCallback+0x3e>
		HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf2, NB_CAR_TO_RECEIVE);
 800535e:	2201      	movs	r2, #1
 8005360:	490d      	ldr	r1, [pc, #52]	; (8005398 <HAL_UART_RxCpltCallback+0x6c>)
 8005362:	480e      	ldr	r0, [pc, #56]	; (800539c <HAL_UART_RxCpltCallback+0x70>)
 8005364:	f7fe fabe 	bl	80038e4 <HAL_UART_Receive_IT>
}
 8005368:	e009      	b.n	800537e <HAL_UART_RxCpltCallback+0x52>
	if (UartHandle -> Instance == USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <HAL_UART_RxCpltCallback+0x74>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d104      	bne.n	800537e <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, NB_CAR_TO_RECEIVE);
 8005374:	2201      	movs	r2, #1
 8005376:	490b      	ldr	r1, [pc, #44]	; (80053a4 <HAL_UART_RxCpltCallback+0x78>)
 8005378:	480b      	ldr	r0, [pc, #44]	; (80053a8 <HAL_UART_RxCpltCallback+0x7c>)
 800537a:	f7fe fab3 	bl	80038e4 <HAL_UART_Receive_IT>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40011400 	.word	0x40011400
 800538c:	20000068 	.word	0x20000068
 8005390:	20000070 	.word	0x20000070
 8005394:	40004400 	.word	0x40004400
 8005398:	20000064 	.word	0x20000064
 800539c:	200000b0 	.word	0x200000b0
 80053a0:	40011000 	.word	0x40011000
 80053a4:	20000060 	.word	0x20000060
 80053a8:	200000f0 	.word	0x200000f0

080053ac <put_string>:

//================================================================
//				PUT STRING
//================================================================
void put_string(char* s)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80053b4:	e007      	b.n	80053c6 <put_string+0x1a>
	{
		put_char(*s);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff ffa2 	bl	8005304 <put_char>
		s++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3301      	adds	r3, #1
 80053c4:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f3      	bne.n	80053b6 <put_string+0xa>
	}
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <sendFrame>:
		s++;
	}
}

void sendFrame(unsigned char* s, int size)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&Uart6Handle, s, size, 0xFFFF);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4803      	ldr	r0, [pc, #12]	; (80053fc <sendFrame+0x24>)
 80053ee:	f7fe f9e0 	bl	80037b2 <HAL_UART_Transmit>
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000070 	.word	0x20000070

08005400 <term_printf>:
//================================================================
//				TERM_PRINTF
//================================================================

void term_printf(const char* fmt, ...)
{
 8005400:	b40f      	push	{r0, r1, r2, r3}
 8005402:	b5b0      	push	{r4, r5, r7, lr}
 8005404:	b0a4      	sub	sp, #144	; 0x90
 8005406:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8005408:	2300      	movs	r3, #0
 800540a:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 800540c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005410:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 8005412:	e1cd      	b.n	80057b0 <term_printf+0x3b0>
		if (*fmt =='%') {
 8005414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b25      	cmp	r3, #37	; 0x25
 800541c:	f040 81bd 	bne.w	800579a <term_printf+0x39a>
			size=0; sp=1;
 8005420:	2300      	movs	r3, #0
 8005422:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005424:	2301      	movs	r3, #1
 8005426:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8005428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800542c:	3301      	adds	r3, #1
 800542e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b30      	cmp	r3, #48	; 0x30
 800543a:	d106      	bne.n	800544a <term_printf+0x4a>
 800543c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005440:	3301      	adds	r3, #1
 8005442:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005446:	2300      	movs	r3, #0
 8005448:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 800544a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8005454:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005458:	2b30      	cmp	r3, #48	; 0x30
 800545a:	d92c      	bls.n	80054b6 <term_printf+0xb6>
 800545c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005460:	2b39      	cmp	r3, #57	; 0x39
 8005462:	d828      	bhi.n	80054b6 <term_printf+0xb6>
				char tmp[10];
				int i=0;
 8005464:	2300      	movs	r3, #0
 8005466:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 8005468:	e012      	b.n	8005490 <term_printf+0x90>
					tmp[i++]=ch;
 800546a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	673a      	str	r2, [r7, #112]	; 0x70
 8005470:	3388      	adds	r3, #136	; 0x88
 8005472:	443b      	add	r3, r7
 8005474:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8005478:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 800547c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005480:	3301      	adds	r3, #1
 8005482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8005490:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005494:	2b2f      	cmp	r3, #47	; 0x2f
 8005496:	d903      	bls.n	80054a0 <term_printf+0xa0>
 8005498:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800549c:	2b39      	cmp	r3, #57	; 0x39
 800549e:	d9e4      	bls.n	800546a <term_printf+0x6a>
				}
				tmp[i]='\0';
 80054a0:	463a      	mov	r2, r7
 80054a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a4:	4413      	add	r3, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 80054aa:	463b      	mov	r3, r7
 80054ac:	210a      	movs	r1, #10
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fd4a 	bl	8004f48 <str2num>
 80054b4:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 80054b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80054ba:	2b25      	cmp	r3, #37	; 0x25
 80054bc:	d03c      	beq.n	8005538 <term_printf+0x138>
 80054be:	2b25      	cmp	r3, #37	; 0x25
 80054c0:	f2c0 8164 	blt.w	800578c <term_printf+0x38c>
 80054c4:	2b78      	cmp	r3, #120	; 0x78
 80054c6:	f300 8161 	bgt.w	800578c <term_printf+0x38c>
 80054ca:	2b63      	cmp	r3, #99	; 0x63
 80054cc:	f2c0 815e 	blt.w	800578c <term_printf+0x38c>
 80054d0:	3b63      	subs	r3, #99	; 0x63
 80054d2:	2b15      	cmp	r3, #21
 80054d4:	f200 815a 	bhi.w	800578c <term_printf+0x38c>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <term_printf+0xe0>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005541 	.word	0x08005541
 80054e4:	0800556b 	.word	0x0800556b
 80054e8:	0800578d 	.word	0x0800578d
 80054ec:	0800566b 	.word	0x0800566b
 80054f0:	0800578d 	.word	0x0800578d
 80054f4:	0800578d 	.word	0x0800578d
 80054f8:	0800578d 	.word	0x0800578d
 80054fc:	0800578d 	.word	0x0800578d
 8005500:	0800578d 	.word	0x0800578d
 8005504:	0800578d 	.word	0x0800578d
 8005508:	0800578d 	.word	0x0800578d
 800550c:	0800578d 	.word	0x0800578d
 8005510:	080055db 	.word	0x080055db
 8005514:	08005607 	.word	0x08005607
 8005518:	0800578d 	.word	0x0800578d
 800551c:	0800578d 	.word	0x0800578d
 8005520:	08005559 	.word	0x08005559
 8005524:	0800578d 	.word	0x0800578d
 8005528:	080055af 	.word	0x080055af
 800552c:	0800578d 	.word	0x0800578d
 8005530:	0800578d 	.word	0x0800578d
 8005534:	0800563f 	.word	0x0800563f
				case '%':
					put_char('%');
 8005538:	2025      	movs	r0, #37	; 0x25
 800553a:	f7ff fee3 	bl	8005304 <put_char>
					break;
 800553e:	e132      	b.n	80057a6 <term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8005540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005542:	1d1a      	adds	r2, r3, #4
 8005544:	64ba      	str	r2, [r7, #72]	; 0x48
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					put_char(ch);
 800554c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fed7 	bl	8005304 <put_char>
					break;
 8005556:	e126      	b.n	80057a6 <term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 8005558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	64ba      	str	r2, [r7, #72]	; 0x48
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	66fb      	str	r3, [r7, #108]	; 0x6c
					put_string(p);
 8005562:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005564:	f7ff ff22 	bl	80053ac <put_string>
					break;
 8005568:	e11d      	b.n	80057a6 <term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 800556a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556c:	1d1a      	adds	r2, r3, #4
 800556e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 8005576:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	da07      	bge.n	800558e <term_printf+0x18e>
						put_char('-');
 800557e:	202d      	movs	r0, #45	; 0x2d
 8005580:	f7ff fec0 	bl	8005304 <put_char>
						ul = -(long)ul;
 8005584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005588:	425b      	negs	r3, r3
 800558a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 800558e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005590:	f107 000c 	add.w	r0, r7, #12
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005598:	220a      	movs	r2, #10
 800559a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800559e:	f7ff fc4f 	bl	8004e40 <num2str>
					put_string(s);
 80055a2:	f107 030c 	add.w	r3, r7, #12
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ff00 	bl	80053ac <put_string>
					break;
 80055ac:	e0fb      	b.n	80057a6 <term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 80055ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 80055ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055bc:	f107 000c 	add.w	r0, r7, #12
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055c4:	220a      	movs	r2, #10
 80055c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80055ca:	f7ff fc39 	bl	8004e40 <num2str>
					put_string(s);
 80055ce:	f107 030c 	add.w	r3, r7, #12
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff feea 	bl	80053ac <put_string>
					break;
 80055d8:	e0e5      	b.n	80057a6 <term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 80055da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	64ba      	str	r2, [r7, #72]	; 0x48
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 80055e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e8:	f107 000c 	add.w	r0, r7, #12
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f0:	2208      	movs	r2, #8
 80055f2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80055f6:	f7ff fc23 	bl	8004e40 <num2str>
					put_string(s);
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fed4 	bl	80053ac <put_string>
					break;
 8005604:	e0cf      	b.n	80057a6 <term_printf+0x3a6>
				case 'p':
					put_char('0');
 8005606:	2030      	movs	r0, #48	; 0x30
 8005608:	f7ff fe7c 	bl	8005304 <put_char>
					put_char('x');
 800560c:	2078      	movs	r0, #120	; 0x78
 800560e:	f7ff fe79 	bl	8005304 <put_char>
					ul = va_arg(ap, unsigned int);
 8005612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005614:	1d1a      	adds	r2, r3, #4
 8005616:	64ba      	str	r2, [r7, #72]	; 0x48
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800561e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005620:	f107 000c 	add.w	r0, r7, #12
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005628:	2210      	movs	r2, #16
 800562a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800562e:	f7ff fc07 	bl	8004e40 <num2str>
					put_string(s);
 8005632:	f107 030c 	add.w	r3, r7, #12
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff feb8 	bl	80053ac <put_string>
					break;
 800563c:	e0b3      	b.n	80057a6 <term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	1d1a      	adds	r2, r3, #4
 8005642:	64ba      	str	r2, [r7, #72]	; 0x48
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800564a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564c:	f107 000c 	add.w	r0, r7, #12
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005654:	2210      	movs	r2, #16
 8005656:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800565a:	f7ff fbf1 	bl	8004e40 <num2str>
					put_string(s);
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fea2 	bl	80053ac <put_string>
					break;
 8005668:	e09d      	b.n	80057a6 <term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 800566a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10c      	bne.n	800568a <term_printf+0x28a>
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	3307      	adds	r3, #7
 8005674:	f023 0307 	bic.w	r3, r3, #7
 8005678:	f103 0208 	add.w	r2, r3, #8
 800567c:	64ba      	str	r2, [r7, #72]	; 0x48
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8005686:	2301      	movs	r3, #1
 8005688:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 800568a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568c:	3307      	adds	r3, #7
 800568e:	f023 0307 	bic.w	r3, r3, #7
 8005692:	f103 0208 	add.w	r2, r3, #8
 8005696:	64ba      	str	r2, [r7, #72]	; 0x48
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 80056a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	0fc2      	lsrs	r2, r0, #31
 80056ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80056b2:	0fcb      	lsrs	r3, r1, #31
 80056b4:	4613      	mov	r3, r2
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 80056bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c2:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 80056c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 80056d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80056d6:	eddf 6a40 	vldr	s13, [pc, #256]	; 80057d8 <term_printf+0x3d8>
 80056da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 80056e2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 80056f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	0dc2      	lsrs	r2, r0, #23
 8005700:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8005704:	0dcb      	lsrs	r3, r1, #23
 8005706:	4613      	mov	r3, r2
 8005708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 800570e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	0d02      	lsrs	r2, r0, #20
 800571c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8005720:	0d0b      	lsrs	r3, r1, #20
 8005722:	4613      	mov	r3, r2
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572a:	4313      	orrs	r3, r2
 800572c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 800572e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005730:	3b7f      	subs	r3, #127	; 0x7f
 8005732:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 8005734:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005736:	f7fa feb3 	bl	80004a0 <__aeabi_f2d>
 800573a:	4604      	mov	r4, r0
 800573c:	460d      	mov	r5, r1
 800573e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005740:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80057d0 <term_printf+0x3d0>
 8005744:	f7ff fd10 	bl	8005168 <myPow>
 8005748:	ec53 2b10 	vmov	r2, r3, d0
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f7fa fefe 	bl	8000550 <__aeabi_dmul>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	f7fb f90a 	bl	8000974 <__aeabi_d2f>
 8005760:	4603      	mov	r3, r0
 8005762:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ put_char('-'); }
 8005764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <term_printf+0x370>
 800576a:	202d      	movs	r0, #45	; 0x2d
 800576c:	f7ff fdca 	bl	8005304 <put_char>
					float2str((char*)s, f, 5);
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	2105      	movs	r1, #5
 8005776:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fca4 	bl	80050c8 <float2str>
					put_string((char*)s);
 8005780:	f107 030c 	add.w	r3, r7, #12
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fe11 	bl	80053ac <put_string>
					break;
 800578a:	e00c      	b.n	80057a6 <term_printf+0x3a6>

				default:
					put_char(*fmt);
 800578c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fdb6 	bl	8005304 <put_char>
 8005798:	e005      	b.n	80057a6 <term_printf+0x3a6>
			}
		} else put_char(*fmt);
 800579a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fdaf 	bl	8005304 <put_char>
		fmt++;
 80057a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057aa:	3301      	adds	r3, #1
 80057ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 80057b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f47f ae2c 	bne.w	8005414 <term_printf+0x14>
	}
	va_end(ap);
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	3788      	adds	r7, #136	; 0x88
 80057c2:	46bd      	mov	sp, r7
 80057c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80057c8:	b004      	add	sp, #16
 80057ca:	4770      	bx	lr
 80057cc:	f3af 8000 	nop.w
 80057d0:	00000000 	.word	0x00000000
 80057d4:	40000000 	.word	0x40000000
 80057d8:	49800000 	.word	0x49800000

080057dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80057dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80057e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057e2:	e003      	b.n	80057ec <LoopCopyDataInit>

080057e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057e4:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80057e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057ea:	3104      	adds	r1, #4

080057ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057ec:	480b      	ldr	r0, [pc, #44]	; (800581c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057f4:	d3f6      	bcc.n	80057e4 <CopyDataInit>
  ldr  r2, =_sbss
 80057f6:	4a0b      	ldr	r2, [pc, #44]	; (8005824 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057f8:	e002      	b.n	8005800 <LoopFillZerobss>

080057fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057fc:	f842 3b04 	str.w	r3, [r2], #4

08005800 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005802:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005804:	d3f9      	bcc.n	80057fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005806:	f7ff fae5 	bl	8004dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800580a:	f000 f811 	bl	8005830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800580e:	f7ff f883 	bl	8004918 <main>
  bx  lr    
 8005812:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005814:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005818:	08005b94 	.word	0x08005b94
  ldr  r0, =_sdata
 800581c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005820:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8005824:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8005828:	200003bc 	.word	0x200003bc

0800582c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800582c:	e7fe      	b.n	800582c <ADC_IRQHandler>
	...

08005830 <__libc_init_array>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4d0d      	ldr	r5, [pc, #52]	; (8005868 <__libc_init_array+0x38>)
 8005834:	4c0d      	ldr	r4, [pc, #52]	; (800586c <__libc_init_array+0x3c>)
 8005836:	1b64      	subs	r4, r4, r5
 8005838:	10a4      	asrs	r4, r4, #2
 800583a:	2600      	movs	r6, #0
 800583c:	42a6      	cmp	r6, r4
 800583e:	d109      	bne.n	8005854 <__libc_init_array+0x24>
 8005840:	4d0b      	ldr	r5, [pc, #44]	; (8005870 <__libc_init_array+0x40>)
 8005842:	4c0c      	ldr	r4, [pc, #48]	; (8005874 <__libc_init_array+0x44>)
 8005844:	f000 f826 	bl	8005894 <_init>
 8005848:	1b64      	subs	r4, r4, r5
 800584a:	10a4      	asrs	r4, r4, #2
 800584c:	2600      	movs	r6, #0
 800584e:	42a6      	cmp	r6, r4
 8005850:	d105      	bne.n	800585e <__libc_init_array+0x2e>
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	f855 3b04 	ldr.w	r3, [r5], #4
 8005858:	4798      	blx	r3
 800585a:	3601      	adds	r6, #1
 800585c:	e7ee      	b.n	800583c <__libc_init_array+0xc>
 800585e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005862:	4798      	blx	r3
 8005864:	3601      	adds	r6, #1
 8005866:	e7f2      	b.n	800584e <__libc_init_array+0x1e>
 8005868:	08005b8c 	.word	0x08005b8c
 800586c:	08005b8c 	.word	0x08005b8c
 8005870:	08005b8c 	.word	0x08005b8c
 8005874:	08005b90 	.word	0x08005b90

08005878 <memcpy>:
 8005878:	440a      	add	r2, r1
 800587a:	4291      	cmp	r1, r2
 800587c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005880:	d100      	bne.n	8005884 <memcpy+0xc>
 8005882:	4770      	bx	lr
 8005884:	b510      	push	{r4, lr}
 8005886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800588a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800588e:	4291      	cmp	r1, r2
 8005890:	d1f9      	bne.n	8005886 <memcpy+0xe>
 8005892:	bd10      	pop	{r4, pc}

08005894 <_init>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr

080058a0 <_fini>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr
